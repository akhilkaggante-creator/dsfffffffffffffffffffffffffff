{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"sqlite\",\n  dbCredentials: {\n    url: \"rosae.db\",\n  },\n});\n","size_bytes":200},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nROSAE is a comprehensive theatre management system built for theatre rental businesses. The application provides detailed booking entry, financial tracking, analytics, and employee management features. It serves as a complete solution for managing theatre operations including booking management, expense tracking, leave applications, user management, and comprehensive analytics dashboards.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management with caching and synchronization\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom ROSAE brand color scheme (red and dark gray theme)\n- **Form Management**: React Hook Form with Zod validation for type-safe form handling\n- **Charts**: Recharts for data visualization and analytics dashboards\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js REST API\n- **Language**: TypeScript for full-stack type safety\n- **Build System**: Vite for fast development and optimized production builds\n- **Session Management**: Express sessions for user authentication state\n\n## Data Storage\n- **Database**: SQLite with Better-SQLite3 for local development and simple deployment\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema evolution\n- **File Storage**: Local SQLite file (`rosae.db`) for data persistence\n\n## Authentication & Authorization\n- **Strategy**: JWT tokens with bcrypt password hashing\n- **Session Storage**: Express sessions with in-memory storage\n- **Role-based Access**: Admin and employee roles with different permission levels\n- **Development Mode**: Simplified authentication bypass for development environment\n\n## Key Features & Modules\n- **Booking Management**: Theatre reservation system with time slots, guest capacity, and payment tracking\n- **Financial Tracking**: Cash and UPI payment recording, expense management, and revenue analytics\n- **Analytics Dashboard**: Revenue charts, payment method breakdowns, and booking statistics\n- **User Management**: Employee and admin account management with role-based permissions\n- **Leave Management**: Employee leave application and approval workflow\n- **Verification System**: Booking verification and audit trail functionality\n\n## API Design\n- **Architecture**: RESTful API with conventional HTTP methods\n- **Data Format**: JSON request/response bodies\n- **Error Handling**: Centralized error handling with appropriate HTTP status codes\n- **Query Parameters**: Support for filtering, pagination, and date ranges\n\n# External Dependencies\n\n## Core Runtime Dependencies\n- **Express.js**: Web framework for API endpoints and middleware\n- **Better-SQLite3**: Embedded database for data persistence\n- **Drizzle ORM**: Type-safe database operations and query building\n- **bcryptjs**: Password hashing for secure authentication\n- **jsonwebtoken**: JWT token generation and verification\n\n## Frontend Libraries\n- **React**: Component-based UI framework with hooks\n- **TanStack Query**: Server state management and caching\n- **Wouter**: Lightweight routing solution\n- **Radix UI**: Accessible component primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation\n- **Recharts**: Chart and data visualization library\n\n## Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking\n- **ESBuild**: Fast JavaScript bundler for production\n- **PostCSS**: CSS processing with Tailwind integration\n\n## Optional Integrations\n- **SendGrid**: Email service integration (configured but not actively used)\n- **Calendar APIs**: External calendar integration capabilities for booking synchronization","size_bytes":4115},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"spin-slow\": {\n          from: {\n            transform: \"rotate(0deg)\",\n          },\n          to: {\n            transform: \"rotate(360deg)\",\n          },\n        },\n        \"spin-slow-reverse\": {\n          from: {\n            transform: \"rotate(360deg)\",\n          },\n          to: {\n            transform: \"rotate(0deg)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"spin-slow\": \"spin-slow 20s linear infinite\",\n        \"spin-slow-reverse\": \"spin-slow-reverse 25s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3107},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":635},"server/auth.ts":{"content":"import bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport { storage } from './storage';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'rosae-secret-key-2024';\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface UserSession {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport function generateToken(user: UserSession): string {\n  return jwt.sign(user, JWT_SECRET, { expiresIn: '24h' });\n}\n\nexport function verifyToken(token: string): UserSession | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as UserSession;\n  } catch {\n    return null;\n  }\n}\n\nexport async function authenticateUser(credentials: LoginCredentials): Promise<UserSession | null> {\n  const user = await storage.getUserByEmail(credentials.email);\n  \n  if (!user || !user.passwordHash) {\n    return null;\n  }\n\n  const isValidPassword = await verifyPassword(credentials.password, user.passwordHash);\n  \n  if (!isValidPassword) {\n    return null;\n  }\n\n  return {\n    id: user.id,\n    email: user.email || '',\n    firstName: user.firstName || '',\n    lastName: user.lastName || '',\n    role: user.role || 'employee',\n  };\n}\n\nexport async function createUser(userData: {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role?: string;\n}) {\n  const passwordHash = await hashPassword(userData.password);\n  \n  return storage.upsertUser({\n    id: crypto.randomUUID(),\n    email: userData.email,\n    firstName: userData.firstName,\n    lastName: userData.lastName,\n    passwordHash: passwordHash,\n    role: userData.role || 'employee',\n  });\n} ","size_bytes":1916},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/better-sqlite3';\nimport Database from 'better-sqlite3';\nimport * as schema from \"@shared/schema\";\n\n// Use SQLite for local development\nconst sqlite = new Database('rosae.db');\nexport const db = drizzle(sqlite, { schema });\n\n// Initialize database tables\nexport function initializeDatabase() {\n  // Drop existing tables to ensure clean schema\n  sqlite.exec(`\n    DROP TABLE IF EXISTS configurations;\n    DROP TABLE IF EXISTS sales_reports;\n    DROP TABLE IF EXISTS calendar_events;\n    DROP TABLE IF EXISTS activity_logs;\n    DROP TABLE IF EXISTS customer_tickets;\n    DROP TABLE IF EXISTS leave_applications;\n    DROP TABLE IF EXISTS expenses;\n    DROP TABLE IF EXISTS bookings;\n    DROP TABLE IF EXISTS sessions;\n    DROP TABLE IF EXISTS users;\n  `);\n  \n  // Create tables with correct schema\n  sqlite.exec(`\n         CREATE TABLE IF NOT EXISTS users (\n       id TEXT PRIMARY KEY,\n       email TEXT UNIQUE NOT NULL,\n       first_name TEXT,\n       last_name TEXT,\n       profile_image_url TEXT,\n       password_hash TEXT,\n       role TEXT DEFAULT 'user',\n       created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n       updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n     );\n\n    CREATE TABLE IF NOT EXISTS bookings (\n      id TEXT PRIMARY KEY,\n      theatre_name TEXT NOT NULL,\n      time_slot TEXT NOT NULL,\n      guests INTEGER NOT NULL,\n      customer_name TEXT NOT NULL,\n      phone_number TEXT,\n      age INTEGER,\n      total_amount REAL NOT NULL DEFAULT 0,\n      cash_amount REAL NOT NULL DEFAULT 0,\n      upi_amount REAL NOT NULL DEFAULT 0,\n      snacks_amount REAL NOT NULL DEFAULT 0,\n      snacks_cash REAL NOT NULL DEFAULT 0,\n      snacks_upi REAL NOT NULL DEFAULT 0,\n      booking_date TEXT NOT NULL,\n      is_eighteen_plus INTEGER NOT NULL DEFAULT 1,\n      eighteen_plus_reason TEXT,\n      eighteen_plus_description TEXT,\n      visited INTEGER NOT NULL DEFAULT 1,\n      visited_reason TEXT,\n      visited_description TEXT,\n      repeat_count INTEGER NOT NULL DEFAULT 0,\n      created_by TEXT,\n      created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n      updated_at TEXT DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n\n    CREATE TABLE IF NOT EXISTS expenses (\n      id TEXT PRIMARY KEY,\n      description TEXT NOT NULL,\n      amount REAL NOT NULL,\n      category TEXT NOT NULL,\n      expense_date TEXT NOT NULL,\n      created_by TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n\n    CREATE TABLE IF NOT EXISTS leave_applications (\n      id TEXT PRIMARY KEY,\n      employee_name TEXT NOT NULL,\n      leave_type TEXT NOT NULL,\n      start_date TEXT NOT NULL,\n      end_date TEXT NOT NULL,\n      reason TEXT NOT NULL,\n      status TEXT DEFAULT 'pending',\n      created_by TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n\n    CREATE TABLE IF NOT EXISTS customer_tickets (\n      id TEXT PRIMARY KEY,\n      customer_name TEXT NOT NULL,\n      issue TEXT NOT NULL,\n      description TEXT,\n      status TEXT DEFAULT 'open',\n      priority TEXT DEFAULT 'medium',\n      created_by TEXT NOT NULL,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n\n         CREATE TABLE IF NOT EXISTS activity_logs (\n       id TEXT PRIMARY KEY,\n       user_id TEXT NOT NULL,\n       action TEXT NOT NULL,\n       resource_type TEXT NOT NULL,\n       resource_id TEXT,\n       details TEXT,\n       created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n       FOREIGN KEY (user_id) REFERENCES users(id)\n     );\n\n    CREATE TABLE IF NOT EXISTS sessions (\n      sid TEXT PRIMARY KEY,\n      sess TEXT NOT NULL,\n      expire DATETIME NOT NULL\n    );\n\n    CREATE TABLE IF NOT EXISTS calendar_events (\n      id TEXT PRIMARY KEY,\n      booking_id TEXT NOT NULL,\n      google_calendar_event_id TEXT,\n      title TEXT NOT NULL,\n      description TEXT,\n      start_time TEXT NOT NULL,\n      end_time TEXT NOT NULL,\n      location TEXT,\n      status TEXT DEFAULT 'confirmed',\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (booking_id) REFERENCES bookings(id)\n    );\n\n    CREATE TABLE IF NOT EXISTS sales_reports (\n      id TEXT PRIMARY KEY,\n      report_date TEXT NOT NULL,\n      total_revenue REAL NOT NULL,\n      food_sales REAL DEFAULT 0,\n      screen_sales REAL DEFAULT 0,\n      total_bookings INTEGER DEFAULT 0,\n      total_guests INTEGER DEFAULT 0,\n      avg_booking_value REAL DEFAULT 0,\n      created_by TEXT,\n      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n      FOREIGN KEY (created_by) REFERENCES users(id)\n    );\n\n    CREATE TABLE IF NOT EXISTS configurations (\n      key TEXT PRIMARY KEY,\n      value TEXT NOT NULL,\n      updated_by TEXT,\n      updated_at TEXT DEFAULT CURRENT_TIMESTAMP\n    );\n  `);\n}","size_bytes":5100},"server/devAuth.ts":{"content":"import type { Express, RequestHandler } from \"express\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\n\n// Development mode authentication bypass\nexport async function setupDevAuth(app: Express) {\n  // Set up session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'rosae-dev-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    }\n  }));\n\n  // Development login endpoint\n  app.get(\"/api/login\", (req, res) => {\n    // In dev mode, redirect to a dev login page that sets up a session\n    res.redirect(\"/api/dev-login\");\n  });\n\n  app.get(\"/api/dev-login\", async (req, res) => {\n    try {\n      // Create a simple admin user\n      const adminUser = {\n        id: \"admin-001\", // Match the ID used in the session\n        email: \"rosaeleisure@gmail.com\",\n        first_name: \"ROSAE\",\n        last_name: \"Admin\",\n        profile_image_url: null,\n        role: \"admin\",\n      };\n\n      // Create the user in the database\n      try {\n        console.log(\"Creating user in database:\", adminUser);\n        const createdUser = await storage.upsertUser(adminUser);\n        console.log(\"User created successfully:\", createdUser);\n      } catch (dbError) {\n        console.error(\"Error creating user in database:\", dbError);\n        // Continue anyway - the session will still work\n      }\n\n      // Set up a mock session\n      (req as any).session.user = {\n        claims: {\n          sub: adminUser.id,\n          email: adminUser.email,\n          first_name: adminUser.first_name,\n          last_name: adminUser.last_name,\n          profile_image_url: adminUser.profile_image_url,\n        },\n        access_token: \"dev-token\",\n        refresh_token: \"dev-refresh\",\n        expires_at: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n      };\n\n      res.redirect(\"/?logged_in=true\");\n    } catch (error) {\n      console.error(\"Dev login error:\", error);\n      res.status(500).json({ message: \"Dev login failed\" });\n    }\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    if ((req as any).session) {\n      (req as any).session.destroy();\n    }\n    res.redirect(\"/\");\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  // Check if user is authenticated via session\n  const sessionUser = (req as any).session?.user;\n\n  if (!sessionUser) {\n    return res.status(401).json({ message: \"Unauthorized - Please login\" });\n  }\n\n  // Attach user to request\n  (req as any).user = sessionUser;\n  next();\n};","size_bytes":2633},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport dotenv from \"dotenv\";\nimport { initializeDatabase } from \"./db\";\n\n// Load environment variables from .env file\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize SQLite database\n  initializeDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2260},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n// import { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { isAuthenticated } from \"./devAuth\";\nimport { insertBookingSchema, insertExpenseSchema, insertLeaveApplicationSchema, type Booking } from \"@shared/schema\";\nimport session from \"express-session\";\nimport bcrypt from \"bcryptjs\";\n\n// Calendar webhook helper function\nasync function createCalendarEvent(booking: Booking) {\n  const startTime = new Date(`${booking.bookingDate}T${booking.timeSlot.split('-')[0]}:00`);\n  const endTime = new Date(`${booking.bookingDate}T${booking.timeSlot.split('-')[1]}:00`);\n  \n  // Include phone number in description if available\n  const phoneInfo = booking.phoneNumber ? ` Phone: ${booking.phoneNumber}.` : '';\n  \n  const calendarEvent = {\n    bookingId: booking.id,\n    title: `${booking.theatreName} Booking - ${booking.guests} guests`,\n    description: `Theatre booking for ${booking.guests} guests. Total: ₹${booking.totalAmount}.${phoneInfo} Created by: ${booking.createdBy}`,\n    startTime,\n    endTime,\n    location: booking.theatreName,\n  };\n\n  return await storage.createCalendarEvent(calendarEvent);\n}\n\n// Webhook endpoint for calendar integration\nasync function sendWebhookNotification(action: string, data: any) {\n  // This would integrate with external calendar APIs like Google Calendar\n  // For now, we'll just log the webhook data\n  console.log(`Calendar webhook: ${action}`, data);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Set up session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'rosae-dev-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    }\n  }));\n\n  // Direct login endpoint for testing\n  app.get('/api/direct-login', async (req: any, res) => {\n    try {\n      // Create a simple admin user\n      const adminUser = {\n        id: \"admin-001\",\n        email: \"admin@rosae.com\",\n        firstName: \"Admin\",\n        lastName: \"User\",\n        profileImageUrl: null,\n        role: \"admin\",\n      };\n\n      // Create the user in the database using direct SQL\n      try {\n        console.log(\"Creating user in database:\", adminUser);\n        // Use direct SQL to insert or replace the admin user\n        const db = require('./db').db;\n        await db.execute(`\n          INSERT OR REPLACE INTO users (id, email, first_name, last_name, profile_image_url, role, created_at, updated_at)\n          VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))\n        `, [\n          adminUser.id,\n          adminUser.email,\n          adminUser.firstName,\n          adminUser.lastName,\n          adminUser.profileImageUrl,\n          adminUser.role\n        ]);\n        console.log(\"User created successfully via SQL\");\n      } catch (dbError) {\n        console.error(\"Error creating user in database:\", dbError);\n        // Continue anyway - the session will still work\n      }\n\n      // Set up the session directly\n      req.session.user = {\n        claims: {\n          sub: adminUser.id,\n          email: adminUser.email,\n          first_name: adminUser.firstName,\n          last_name: adminUser.lastName,\n          profile_image_url: adminUser.profileImageUrl,\n        },\n        access_token: \"dev-token\",\n      };\n      \n      // Save session explicitly before redirecting\n      req.session.save((err: any) => {\n        if (err) {\n          console.error(\"Session save error:\", err);\n          return res.status(500).json({ message: \"Session save failed\" });\n        }\n        console.log(\"Session saved successfully:\", req.session);\n        // Respond with JSON instead of redirect for testing\n        res.json({ success: true, message: \"Logged in successfully\", user: adminUser });\n      });\n    } catch (error) {\n      console.error(\"Direct login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      // Check if user is authenticated via session\n      const sessionUser = (req as any).session?.user;\n      \n      if (!sessionUser) {\n        return res.status(401).json({ message: \"Unauthorized - Please login\" });\n      }\n\n      // Return the user data from session\n      res.json({\n        id: sessionUser.claims.sub,\n        email: sessionUser.claims.email,\n        firstName: sessionUser.claims.first_name,\n        lastName: sessionUser.claims.last_name,\n        profileImageUrl: sessionUser.claims.profile_image_url,\n        role: 'admin', // Default to admin for development\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Login route\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      console.log('Login attempt:', req.body);\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        console.log('Missing email or password');\n        return res.status(400).json({ message: 'Email and password are required' });\n      }\n\n      console.log('Checking credentials:', { email, password });\n\n      // Check if it's admin login\n      if (email === 'admin@rosae.com' && password === 'Rosae@spaces') {\n        console.log('Admin credentials valid');\n        const user = {\n          id: 'admin-001',\n          email: 'admin@rosae.com',\n          firstName: 'Admin',\n          lastName: 'User',\n          role: 'admin'\n        };\n        \n        // Ensure admin user exists in database\n        try {\n          await storage.upsertUser({\n            id: user.id,\n            email: user.email,\n            first_name: user.firstName,\n            last_name: user.lastName,\n            profile_image_url: null,\n            role: user.role\n          });\n          console.log('Admin user created/updated in database');\n        } catch (dbError) {\n          console.error('Error creating admin user in database:', dbError);\n        }\n        \n        // Set session with claims structure to match isAuthenticated middleware\n        (req as any).session.user = {\n          claims: {\n            sub: user.id,\n            email: user.email,\n            first_name: user.firstName,\n            last_name: user.lastName,\n            profile_image_url: null,\n          },\n          access_token: \"dev-token\",\n        };\n        console.log('Session set:', (req as any).session);\n        \n        res.json(user);\n      } else {\n              // Check for employee login\n      try {\n        console.log('=== EMPLOYEE LOGIN DEBUG ===');\n        console.log('Email provided:', email);\n        console.log('Password provided:', password);\n        \n        const user = await storage.getUserByEmail(email);\n        console.log('Database lookup result:', user ? {\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          hasPasswordHash: !!user.passwordHash,\n          passwordHashLength: user.passwordHash ? user.passwordHash.length : 0\n        } : 'User not found');\n        \n        if (user && user.passwordHash) {\n          console.log('Attempting password comparison...');\n          const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n          console.log('Password comparison result:', isValidPassword);\n          \n          if (isValidPassword) {\n            console.log('✅ Employee login successful for:', user.email);\n            \n            // Set session with claims structure\n            (req as any).session.user = {\n              claims: {\n                sub: user.id,\n                email: user.email,\n                first_name: user.firstName,\n                last_name: user.lastName,\n                profile_image_url: user.profileImageUrl,\n              },\n              access_token: \"dev-token\",\n            };\n            console.log('Session created for employee:', (req as any).session.user);\n            \n            res.json({\n              id: user.id,\n              email: user.email,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: user.role\n            });\n          } else {\n            console.log('❌ Invalid password for employee:', user.email);\n            res.status(401).json({ message: 'Invalid credentials' });\n          }\n        } else {\n          console.log('❌ User not found or missing password hash');\n          res.status(401).json({ message: 'Invalid credentials' });\n        }\n      } catch (error) {\n        console.error('❌ Error during employee login:', error);\n        res.status(401).json({ message: 'Invalid credentials' });\n      }\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      res.json({ message: 'Logged out successfully' });\n    });\n  });\n\n  // Check auth status\n  app.get('/api/auth/status', async (req, res) => {\n    console.log('Auth status check - session:', (req as any).session);\n    const sessionUser = (req as any).session?.user;\n    console.log('Session user:', sessionUser);\n    \n    if (sessionUser && sessionUser.claims) {\n      try {\n        // First try to get the user by ID (sub claim)\n        let user = null;\n        if (sessionUser.claims.sub) {\n          user = await storage.getUser(sessionUser.claims.sub);\n        }\n        \n        // If not found by ID, try by email\n        if (!user && sessionUser.claims.email) {\n          user = await storage.getUserByEmail(sessionUser.claims.email);\n        }\n        \n        console.log(\"User lookup result:\", user ? { id: user.id, email: user.email } : \"User not found\");\n        \n        const userData = {\n          id: sessionUser.claims.sub,\n          email: sessionUser.claims.email,\n          firstName: sessionUser.claims.first_name,\n          lastName: sessionUser.claims.last_name,\n          profileImageUrl: sessionUser.claims.profile_image_url,\n          role: user?.role || (sessionUser.claims.email === 'admin@rosae.com' ? 'admin' : 'employee'),\n        };\n        console.log('Returning authenticated user:', userData);\n        res.json({ authenticated: true, user: userData });\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        // Fallback to session data\n        const userData = {\n          id: sessionUser.claims.sub,\n          email: sessionUser.claims.email,\n          firstName: sessionUser.claims.first_name,\n          lastName: sessionUser.claims.last_name,\n          profileImageUrl: sessionUser.claims.profile_image_url,\n          role: sessionUser.claims.email === 'admin@rosae.com' ? 'admin' : 'employee',\n        };\n        res.json({ authenticated: true, user: userData });\n      }\n    } else {\n      console.log('No valid session found');\n      res.json({ authenticated: false });\n    }\n  });\n\n  // Get all users (admin only)\n  app.get('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      if (currentUser.claims.email !== 'admin@rosae.com') {\n        return res.status(403).json({ message: 'Only admins can view all users' });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // Create new user (admin only)\n  app.post('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      if (currentUser.claims.email !== 'admin@rosae.com') {\n        return res.status(403).json({ message: 'Only admins can create users' });\n      }\n\n      const { email, password, firstName, lastName, role = 'employee' } = req.body;\n\n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ message: 'Email, password, first name, and last name are required' });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User with this email already exists' });\n      }\n\n      // Create new user\n      const newUser = await storage.createUser({\n        email,\n        password,\n        firstName,\n        lastName,\n        role\n      });\n\n      res.status(201).json(newUser);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      res.status(500).json({ message: 'Failed to create user' });\n    }\n  });\n\n  // Admin routes for admin panel\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      if (currentUser.claims.email !== 'admin@rosae.com') {\n        return res.status(403).json({ message: 'Only admins can access admin panel' });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching admin users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  app.patch('/api/admin/users/:userId/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      if (currentUser.claims.email !== 'admin@rosae.com') {\n        return res.status(403).json({ message: 'Only admins can update user roles' });\n      }\n\n      const { userId } = req.params;\n      const { role } = req.body;\n\n      if (!role || !['admin', 'employee'].includes(role)) {\n        return res.status(400).json({ message: 'Valid role is required' });\n      }\n\n      const updatedUser = await storage.updateUserRole(userId, role);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      res.status(500).json({ message: 'Failed to update user role' });\n    }\n  });\n\n  // Debug route to check all users (remove in production)\n  app.get('/api/debug/users', async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      console.log('=== DEBUG: All users in database ===');\n      users.forEach(user => {\n        console.log({\n          id: user.id,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          hasPassword: !!user.passwordHash,\n          passwordLength: user.passwordHash ? user.passwordHash.length : 0\n        });\n      });\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users for debug:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // Configuration management routes\n  app.get('/api/config', async (req, res) => {\n    try {\n      const config = await storage.getConfig();\n      res.json(config);\n    } catch (error) {\n      console.error('Error fetching config:', error);\n      res.status(500).json({ message: 'Failed to fetch configuration' });\n    }\n  });\n\n  app.post('/api/config', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      \n      // Check if user is admin by role or email\n      const userRole = await storage.getUser(currentUser.claims.sub);\n      if (!userRole || (userRole.role !== 'admin' && currentUser.claims.email !== 'admin@rosae.com')) {\n        return res.status(403).json({ message: 'Only admins can update configuration' });\n      }\n\n      const { theatres, timeSlots } = req.body;\n      const userId = currentUser.claims.sub;\n      const config = await storage.updateConfig({ theatres, timeSlots }, userId);\n      res.json(config);\n    } catch (error) {\n      console.error('Error updating config:', error);\n      res.status(500).json({ message: 'Failed to update configuration' });\n    }\n  });\n\n  // Delete user (admin only)\n  app.delete('/api/users/:userId', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      if (currentUser.claims.email !== 'admin@rosae.com') {\n        return res.status(403).json({ message: 'Only admins can delete users' });\n      }\n\n      const { userId } = req.params;\n\n      // Prevent deleting the main admin\n      if (userId === 'admin-001') {\n        return res.status(400).json({ message: 'Cannot delete the main administrator' });\n      }\n\n      await storage.deleteUser(userId);\n      res.json({ message: 'User deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ message: 'Failed to delete user' });\n    }\n  });\n\n\n\n  // Booking routes\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      console.log(\"Session:\", req.session);\n      console.log(\"User from request:\", req.user);\n      const userId = req.user.claims.sub;\n      console.log(\"User ID from session:\", userId);\n      console.log(\"Raw booking data:\", req.body);\n      const bookingData = insertBookingSchema.parse(req.body);\n      console.log(\"Parsed booking data:\", bookingData);\n      \n      // Calculate repeat customer count if phone number is provided\n      let repeatCount = 0;\n      if (bookingData.phoneNumber) {\n        try {\n          const existingBookings = await storage.getBookingsByPhoneNumber(bookingData.phoneNumber);\n          repeatCount = existingBookings.length;\n          console.log(`Found ${repeatCount} existing bookings for phone number: ${bookingData.phoneNumber}`);\n        } catch (error) {\n          console.warn(\"Error counting repeat bookings:\", error);\n          // Continue with repeatCount = 0 if there's an error\n        }\n      }\n      \n      // Add repeat count to booking data\n      const bookingDataWithRepeat = {\n        ...bookingData,\n        repeatCount\n      };\n      \n      // Validate that cash + UPI equals total amount\n      const totalPaid = bookingData.cashAmount + bookingData.upiAmount;\n      const snacksPaid = (bookingData.snacksCash || 0) + (bookingData.snacksUpi || 0);\n      \n      if (Math.abs(totalPaid - bookingData.totalAmount) > 0.01) {\n        return res.status(400).json({ message: \"Cash + UPI must equal total amount\" });\n      }\n      \n      if (Math.abs(snacksPaid - (bookingData.snacksAmount || 0)) > 0.01) {\n        return res.status(400).json({ message: \"Snacks cash + UPI must equal snacks amount\" });\n      }\n\n      // Always ensure the user exists in the database before creating a booking\n      console.log(\"Ensuring user exists in database:\", userId);\n      \n      // Create or update the user using storage API instead of direct SQL\n      try {\n        // Check if user already exists\n        let existingUser = await storage.getUser(userId);\n        \n        if (!existingUser) {\n          // Create the user if they don't exist\n          await storage.upsertUser({\n            id: userId,\n            email: req.user.claims.email || 'admin@rosae.com',\n            first_name: req.user.claims.first_name || 'Admin',\n            last_name: req.user.claims.last_name || 'User',\n            profile_image_url: req.user.claims.profile_image_url || null,\n            role: 'admin'\n          });\n          console.log(\"User created successfully via storage API\");\n        } else {\n          console.log(\"User already exists in database\");\n        }\n      } catch (dbError) {\n        console.error(\"Error creating user in database:\", dbError);\n        return res.status(500).json({ message: \"Failed to create booking - user account issue\" });\n      }\n      \n      // Use the session user ID as the creator\n      let creatorId = userId;\n      \n      // Double-check that the user exists now\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        // If user still doesn't exist, check if there's any admin user we can use\n        const adminUsers = await storage.getAllUsers();\n        const adminUser = adminUsers.find(user => user.role === 'admin');\n        \n        if (adminUser) {\n          creatorId = adminUser.id;\n          console.log(\"Using existing admin user as creator:\", creatorId);\n        } else {\n          // Create a default admin user as a fallback\n          const defaultAdmin = {\n            id: \"admin-001\",\n            email: \"admin@rosae.com\",\n            first_name: \"Admin\",\n            last_name: \"User\",\n            profile_image_url: null,\n            role: \"admin\"\n          };\n          \n          const createdAdmin = await storage.upsertUser(defaultAdmin);\n          creatorId = createdAdmin.id;\n          console.log(\"Created default admin user as creator:\", creatorId);\n        }\n      }\n      \n      // Include phone number in booking data with repeat count\n      const booking = await storage.createBooking({\n        ...bookingDataWithRepeat,\n        createdBy: creatorId,\n      } as any);\n\n      // Create calendar event\n      try {\n        await createCalendarEvent(booking);\n      } catch (calendarError) {\n        console.error(\"Failed to create calendar event:\", calendarError);\n        // Don't fail the booking creation if calendar fails\n      }\n\n      await storage.logActivity(creatorId, \"CREATE\", \"BOOKING\", booking.id, `Created booking for ${bookingData.theatreName}`);\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const page = req.query.page ? parseInt(req.query.page as string) : 1;\n      const pageSize = req.query.pageSize ? parseInt(req.query.pageSize as string) : 10;\n      \n      // Extract filter parameters\n      const filters = {\n        dateFilter: req.query.dateFilter as string | undefined,\n        phoneFilter: req.query.phoneFilter as string | undefined,\n        bookingDateFilter: req.query.bookingDateFilter as string | undefined,\n        repeatCountFilter: req.query.repeatCountFilter as string | undefined,\n      };\n      \n      const result = await storage.getAllBookings(page, pageSize, filters);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/date-range', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      const bookings = await storage.getBookingsByDateRange(startDate as string, endDate as string);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings by date range:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Get single booking by ID\n  app.get('/api/bookings/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const booking = await storage.getBookingById(id);\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking by ID:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  // Search bookings by phone number\n  app.get('/api/bookings/search', isAuthenticated, async (req, res) => {\n    try {\n      const { phone } = req.query;\n      if (!phone) {\n        return res.status(400).json({ message: \"Phone number is required\" });\n      }\n      \n      const bookings = await storage.getBookingsByPhoneNumber(phone as string);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error searching bookings by phone:\", error);\n      res.status(500).json({ message: \"Failed to search bookings\" });\n    }\n  });\n\n  // Expense routes\n  app.post('/api/expenses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const expenseData = insertExpenseSchema.parse(req.body);\n      \n      const expense = await storage.createExpense({\n        ...expenseData,\n        createdBy: userId,\n      } as any);\n\n      await storage.logActivity(userId, \"CREATE\", \"EXPENSE\", expense.id, `Created expense: ${expenseData.description}`);\n      \n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense:\", error);\n      res.status(500).json({ message: \"Failed to create expense\" });\n    }\n  });\n\n  app.get('/api/expenses', isAuthenticated, async (req: any, res) => {\n    try {\n      const { limit } = req.query;\n      const expenses = await storage.getAllExpenses(limit ? parseInt(limit as string) : undefined);\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch expenses\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/daily-revenue', isAuthenticated, async (req, res) => {\n    try {\n      const days = req.query.days ? parseInt(req.query.days as string) : 7;\n      const dailyRevenue = await storage.getDailyRevenue(days);\n      res.json(dailyRevenue);\n    } catch (error) {\n      console.error('Error fetching daily revenue:', error);\n      res.status(500).json({ error: 'Failed to fetch daily revenue data' });\n    }\n  });\n  \n  app.get('/api/analytics/payment-methods', isAuthenticated, async (req, res) => {\n    try {\n      const paymentMethods = await storage.getPaymentMethodBreakdown();\n      res.json(paymentMethods);\n    } catch (error) {\n      console.error('Error fetching payment methods breakdown:', error);\n      res.status(500).json({ error: 'Failed to fetch payment methods data' });\n    }\n  });\n  \n  app.get('/api/analytics/time-slots', isAuthenticated, async (req, res) => {\n    try {\n      const timeSlots = await storage.getTimeSlotPerformance();\n      res.json(timeSlots);\n    } catch (error) {\n      console.error('Error fetching time slot performance:', error);\n      res.status(500).json({ error: 'Failed to fetch time slot data' });\n    }\n  });\n\n  // Leave management routes\n  app.post('/api/leave-applications', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leaveData = insertLeaveApplicationSchema.parse(req.body);\n      \n      const leave = await storage.createLeaveApplication({\n        ...leaveData,\n        userId,\n      });\n\n      await storage.logActivity(userId, \"CREATE\", \"LEAVE_APPLICATION\", leave.id, `Applied for leave from ${leaveData.startDate} to ${leaveData.endDate}`);\n      \n      res.json(leave);\n    } catch (error) {\n      console.error(\"Error creating leave application:\", error);\n      res.status(500).json({ message: \"Failed to create leave application\" });\n    }\n  });\n\n  app.get('/api/leave-applications', isAuthenticated, async (req, res) => {\n    try {\n      const leaves = await storage.getLeaveApplications();\n      res.json(leaves);\n    } catch (error) {\n      console.error(\"Error fetching leave applications:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave applications\" });\n    }\n  });\n\n  app.patch('/api/leave-applications/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const { status } = req.body;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      const updatedLeave = await storage.updateLeaveStatus(id, status, userId);\n      await storage.logActivity(userId, \"UPDATE\", \"LEAVE_APPLICATION\", id, `${status} leave application`);\n      \n      res.json(updatedLeave);\n    } catch (error) {\n      console.error(\"Error updating leave status:\", error);\n      res.status(500).json({ message: \"Failed to update leave status\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/daily-revenue', isAuthenticated, async (req, res) => {\n    try {\n      const { days = 7 } = req.query;\n      const data = await storage.getDailyRevenue(parseInt(days as string));\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching daily revenue:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily revenue\" });\n    }\n  });\n\n  app.get('/api/analytics/payment-methods', isAuthenticated, async (req, res) => {\n    try {\n      const data = await storage.getPaymentMethodBreakdown();\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching payment method breakdown:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment method breakdown\" });\n    }\n  });\n\n  app.get('/api/analytics/time-slots', isAuthenticated, async (req, res) => {\n    try {\n      const data = await storage.getTimeSlotPerformance();\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching time slot performance:\", error);\n      res.status(500).json({ message: \"Failed to fetch time slot performance\" });\n    }\n  });\n\n  // Customer ticket routes removed as requested\n\n  // Customer ticket routes removed as requested\n\n  // Expense export route - fixed duplicate route\n\n  // Customer ticket routes removed as requested\n\n  // Expense export routes\n  app.get('/api/expenses/export', isAuthenticated, async (req, res) => {\n    try {\n      const { category, startDate, endDate } = req.query;\n      let expenses;\n      \n      if (category) {\n        expenses = await storage.getExpensesByCategory(category as string);\n      } else if (startDate && endDate) {\n        expenses = await storage.getExpensesByDateRange(startDate as string, endDate as string);\n      } else {\n        expenses = await storage.getAllExpenses();\n      }\n\n      // Generate CSV format\n      const csvHeaders = 'Date,Category,Description,Amount\\n';\n      const csvData = expenses.map(expense => \n        `${expense.expenseDate},${expense.category},\"${expense.description}\",${expense.amount}`\n      ).join('\\n');\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=\"expenses.csv\"');\n      res.send(csvHeaders + csvData);\n    } catch (error) {\n      console.error(\"Error exporting expenses:\", error);\n      res.status(500).json({ message: \"Failed to export expenses\" });\n    }\n  });\n\n  // Calendar webhook routes\n  app.post('/api/webhooks/calendar', async (req, res) => {\n    try {\n      const { action, bookingId, eventData } = req.body;\n      \n      switch (action) {\n        case 'update':\n          if (eventData && bookingId) {\n            const calendarEvent = await storage.getCalendarEventByBookingId(bookingId);\n            if (calendarEvent) {\n              await storage.updateCalendarEvent(calendarEvent.id, eventData);\n            }\n          }\n          break;\n          \n        case 'delete':\n          if (bookingId) {\n            await storage.deleteCalendarEvent(bookingId);\n          }\n          break;\n          \n        default:\n          return res.status(400).json({ message: \"Invalid action\" });\n      }\n      \n      await sendWebhookNotification(action, { bookingId, eventData });\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error handling calendar webhook:\", error);\n      res.status(500).json({ message: \"Failed to handle webhook\" });\n    }\n  });\n  \n  // Booking webhook endpoint for automatic booking creation\n  app.post('/api/webhooks/booking', async (req, res) => {\n    try {\n      const bookingData = req.body;\n      \n      // Validate the booking data\n      if (!bookingData.theatreName || !bookingData.timeSlot || !bookingData.guests || \n          !bookingData.totalAmount || !bookingData.cashAmount || !bookingData.upiAmount || \n          !bookingData.bookingDate) {\n        return res.status(400).json({ \n          message: \"Missing required booking fields\",\n          requiredFields: [\"theatreName\", \"timeSlot\", \"guests\", \"totalAmount\", \"cashAmount\", \"upiAmount\", \"bookingDate\"]\n        });\n      }\n      \n      // Add phone number if not provided\n      if (!bookingData.phoneNumber) {\n        console.log(\"No phone number provided in webhook booking\");\n      }\n      \n      // Validate that cash + UPI equals total amount\n      const totalPaid = bookingData.cashAmount + bookingData.upiAmount;\n      const snacksPaid = (bookingData.snacksCash || 0) + (bookingData.snacksUpi || 0);\n      \n      if (Math.abs(totalPaid - bookingData.totalAmount) > 0.01) {\n        return res.status(400).json({ message: \"Cash + UPI must equal total amount\" });\n      }\n      \n      if (Math.abs(snacksPaid - (bookingData.snacksAmount || 0)) > 0.01) {\n        return res.status(400).json({ message: \"Snacks cash + UPI must equal snacks amount\" });\n      }\n\n      // Get the first admin user to use as creator for webhook bookings\n      const adminUsers = await storage.getAllUsers();\n      const adminUser = adminUsers.find(user => user.role === 'admin');\n      \n      if (!adminUser) {\n        return res.status(500).json({ message: \"No admin user found to create booking\" });\n      }\n      \n      const booking = await storage.createBooking({\n        ...bookingData,\n        createdBy: adminUser.id,\n      } as any);\n\n      // Create calendar event\n      try {\n        await createCalendarEvent(booking);\n      } catch (calendarError) {\n        console.error(\"Failed to create calendar event from webhook:\", calendarError);\n        // Don't fail the booking creation if calendar fails\n      }\n\n      await storage.logActivity(adminUser.id, \"CREATE\", \"BOOKING\", booking.id, `Created booking via webhook for ${bookingData.theatreName}`);\n      \n      res.status(201).json({\n        success: true,\n        message: \"Booking created successfully\",\n        bookingId: booking.id\n      });\n    } catch (error) {\n      console.error(\"Error creating booking via webhook:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Sales report routes\n  app.get('/api/sales-reports', isAuthenticated, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"Start date and end date are required\" });\n      }\n      \n      const reports = await storage.getSalesReports();\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching sales reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales reports\" });\n    }\n  });\n\n  app.post('/api/sales-reports/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { date } = req.body;\n      \n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n      \n      const report = await storage.generateDailySalesReport(date, {});\n      await storage.logActivity(userId, \"GENERATE\", \"SALES_REPORT\", report.id, `Generated sales report for ${date}`);\n      \n      res.json(report);\n    } catch (error) {\n      console.error(\"Error generating sales report:\", error);\n      res.status(500).json({ message: \"Failed to generate sales report\" });\n    }\n  });\n\n  // Booking edit and delete routes\n  app.patch('/api/bookings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      \n      // Only validate the fields that can be updated\n      const updateData = {\n        guests: req.body.guests ? Number(req.body.guests) : undefined,\n        phoneNumber: req.body.phoneNumber || null,\n        totalAmount: req.body.totalAmount ? Number(req.body.totalAmount) : undefined,\n        cashAmount: req.body.cashAmount ? Number(req.body.cashAmount) : undefined,\n        upiAmount: req.body.upiAmount ? Number(req.body.upiAmount) : undefined,\n        snacksAmount: req.body.snacksAmount ? Number(req.body.snacksAmount) : undefined,\n        snacksCash: req.body.snacksCash ? Number(req.body.snacksCash) : undefined,\n        snacksUpi: req.body.snacksUpi ? Number(req.body.snacksUpi) : undefined,\n        isEighteenPlus: req.body.isEighteenPlus !== undefined ? req.body.isEighteenPlus : undefined,\n        visited: req.body.visited !== undefined ? req.body.visited : undefined,\n        reasonNotEighteen: req.body.reasonNotEighteen !== undefined ? req.body.reasonNotEighteen : undefined,\n        reasonNotVisited: req.body.reasonNotVisited !== undefined ? req.body.reasonNotVisited : undefined,\n        customerName: req.body.customerName !== undefined ? req.body.customerName : undefined,\n      };\n      \n      // Remove undefined fields\n      Object.keys(updateData).forEach(key => {\n        if ((updateData as any)[key] === undefined) {\n          delete (updateData as any)[key];\n        }\n      });\n      \n      const updatedBooking = await storage.updateBooking(id, updateData);\n      \n      // Update calendar event if it exists\n      try {\n        const calendarEvent = await storage.getCalendarEventByBookingId(id);\n        if (calendarEvent && updatedBooking) {\n          const phoneInfo = updatedBooking.phoneNumber ? ` Phone: ${updatedBooking.phoneNumber}.` : '';\n          await storage.updateCalendarEvent(calendarEvent.id, {\n            title: `${updatedBooking.theatreName} Booking - ${updatedBooking.guests} guests`,\n            description: `Theatre booking for ${updatedBooking.guests} guests. Total: ₹${updatedBooking.totalAmount}.${phoneInfo} Updated by: ${userId}`,\n          });\n        }\n      } catch (calendarError) {\n        console.error(\"Failed to update calendar event:\", calendarError);\n      }\n\n      await storage.logActivity(userId, \"UPDATE\", \"BOOKING\", id, `Updated booking details`);\n      \n      res.json(updatedBooking);\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  app.delete('/api/bookings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { id } = req.params;\n      const { reason, comment } = req.body;\n      \n      if (!reason) {\n        return res.status(400).json({ message: \"Reason for deletion is required\" });\n      }\n      \n      // Delete calendar event first\n      try {\n        const calendarEvent = await storage.getCalendarEventByBookingId(id);\n        if (calendarEvent) {\n          await storage.deleteCalendarEvent(calendarEvent.id);\n        }\n        await sendWebhookNotification('delete', { bookingId: id, reason, comment });\n      } catch (calendarError) {\n        console.error(\"Failed to delete calendar event:\", calendarError);\n      }\n      \n      await storage.deleteBooking(id);\n      const logDetails = `Deleted booking - Reason: ${reason}${comment ? `, Comment: ${comment}` : ''}`;\n      await storage.logActivity(userId, \"DELETE\", \"BOOKING\", id, logDetails);\n      \n      res.json({ success: true, message: \"Booking deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch('/api/admin/users/:id/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { id } = req.params;\n      const { role } = req.body;\n      \n      if (!['admin', 'employee'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const updatedUser = await storage.updateUserRole(id, role);\n      await storage.logActivity(req.user.claims.sub, \"UPDATE\", \"USER_ROLE\", id, `Updated user role to ${role}`);\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":41115},"server/storage.ts":{"content":"import { sql, eq, desc, and, like } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { \n  users, bookings, expenses, leaveApplications, activityLogs, \n  calendarEvents, salesReports, configurations \n} from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\n// Create a storage interface for database operations\nexport const storage = {\n  // User operations\n  async findUserByEmail(email: string) {\n    return db.query.users.findFirst({\n      where: eq(users.email, email),\n    });\n  },\n  \n  async getUserByEmail(email: string) {\n    return db.query.users.findFirst({\n      where: eq(users.email, email),\n    });\n  },\n  \n  async getUser(id: string) {\n    return db.query.users.findFirst({\n      where: eq(users.id, id),\n    });\n  },\n  \n  async getAllUsers() {\n    return db.query.users.findMany({\n      orderBy: (users, { asc }) => [asc(users.firstName)],\n    });\n  },\n  \n  async createUser(userData: { email: string; password: string; firstName: string; lastName: string; role?: string }) {\n    const passwordHash = await bcrypt.hash(userData.password, 10);\n    const user = {\n      email: userData.email,\n      firstName: userData.firstName,\n      lastName: userData.lastName,\n      passwordHash,\n      role: userData.role || 'employee'\n    };\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  },\n  \n  async upsertUser(userData: any) {\n    // Check if user exists\n    const existingUser = await this.getUser(userData.id);\n    \n    if (existingUser) {\n      // Update existing user\n      const result = await db.update(users)\n        .set(userData)\n        .where(eq(users.id, userData.id))\n        .returning();\n      return result[0];\n    } else {\n      // Create new user\n      const result = await db.insert(users).values(userData).returning();\n      return result[0];\n    }\n  },\n\n  async updateUserRole(userId: string, role: string) {\n    const result = await db.update(users)\n      .set({ role })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  },\n\n  async deleteUser(userId: string) {\n    await db.delete(users).where(eq(users.id, userId));\n  },\n  \n  // Booking operations\n  async createBooking(bookingData: any) {\n    const result = await db.insert(bookings).values(bookingData).returning();\n    return result[0];\n  },\n\n  async getBookingsByPhoneNumber(phoneNumber: string) {\n    return db.query.bookings.findMany({\n      where: eq(bookings.phoneNumber, phoneNumber),\n      orderBy: (bookings, { desc }) => [desc(bookings.createdAt)],\n    });\n  },\n\n  async getBookingById(bookingId: string) {\n    return db.query.bookings.findFirst({\n      where: eq(bookings.id, bookingId),\n    });\n  },\n\n  async updateBooking(bookingId: string, updateData: any) {\n    const result = await db.update(bookings)\n      .set(updateData)\n      .where(eq(bookings.id, bookingId))\n      .returning();\n    return result[0];\n  },\n\n  async deleteBooking(bookingId: string) {\n    await db.delete(bookings).where(eq(bookings.id, bookingId));\n  },\n\n  async getBookingsByDateRange(startDate: string, endDate: string) {\n    return db.query.bookings.findMany({\n      where: (bookings, { and, gte, lte }) => and(\n        gte(bookings.bookingDate, startDate),\n        lte(bookings.bookingDate, endDate)\n      ),\n      orderBy: [desc(bookings.createdAt)]\n    });\n  },\n  \n  async getAllBookings(page: number = 1, pageSize: number = 10, filters?: {\n    dateFilter?: string;\n    phoneFilter?: string;\n    bookingDateFilter?: string;\n    repeatCountFilter?: string;\n  }) {\n    const offset = (page - 1) * pageSize;\n    \n    // Build where conditions\n    const whereConditions: any[] = [];\n    \n    if (filters?.dateFilter) {\n      const filterDate = filters.dateFilter;\n      whereConditions.push(sql`DATE(${bookings.createdAt}) = ${filterDate}`);\n    }\n    \n    if (filters?.phoneFilter) {\n      whereConditions.push(like(bookings.phoneNumber, `%${filters.phoneFilter}%`));\n    }\n    \n    if (filters?.bookingDateFilter) {\n      whereConditions.push(eq(bookings.bookingDate, filters.bookingDateFilter));\n    }\n    \n    if (filters?.repeatCountFilter) {\n      whereConditions.push(eq(bookings.repeatCount, Number(filters.repeatCountFilter)));\n    }\n    \n    // Combine conditions with AND\n    const whereClause = whereConditions.length > 0 \n      ? and(...whereConditions)\n      : undefined;\n    \n    // Get filtered results\n    const results = await db.select()\n      .from(bookings)\n      .where(whereClause)\n      .orderBy(desc(bookings.createdAt))\n      .limit(pageSize)\n      .offset(offset);\n    \n    // Get total count for pagination with filters\n    const countQuery = db.select({ count: sql`count(*)` })\n      .from(bookings)\n      .where(whereClause);\n    const countResult = await countQuery.execute();\n    const totalCount = Number(countResult[0]?.count || 0);\n    \n    return {\n      bookings: results,\n      pagination: {\n        total: totalCount,\n        page,\n        pageSize,\n        totalPages: Math.ceil(totalCount / pageSize)\n      }\n    };\n  },\n  \n  // Expense operations\n  async createExpense(expenseData: any) {\n    const result = await db.insert(expenses).values(expenseData).returning();\n    return result[0];\n  },\n\n  async getAllExpenses(limit?: number) {\n    return db.query.expenses.findMany({\n      orderBy: [desc(expenses.createdAt)],\n      limit: limit\n    });\n  },\n\n  async getExpensesByCategory(category: string) {\n    return db.query.expenses.findMany({\n      where: eq(expenses.category, category),\n      orderBy: [desc(expenses.createdAt)]\n    });\n  },\n\n  async getExpensesByDateRange(startDate: string, endDate: string) {\n    return db.query.expenses.findMany({\n      where: (expenses, { and, gte, lte }) => and(\n        gte(expenses.expenseDate, startDate),\n        lte(expenses.expenseDate, endDate)\n      ),\n      orderBy: [desc(expenses.createdAt)]\n    });\n  },\n\n  // Leave application operations\n  async createLeaveApplication(leaveData: any) {\n    const result = await db.insert(leaveApplications).values(leaveData).returning();\n    return result[0];\n  },\n\n  async getLeaveApplications() {\n    return db.query.leaveApplications.findMany({\n      orderBy: [desc(leaveApplications.createdAt)]\n    });\n  },\n\n  async updateLeaveStatus(applicationId: string, status: string, reviewedBy: string) {\n    const result = await db.update(leaveApplications)\n      .set({ \n        status, \n        reviewedBy, \n        reviewedAt: new Date().toISOString()\n      })\n      .where(eq(leaveApplications.id, applicationId))\n      .returning();\n    return result[0];\n  },\n\n  // Calendar operations\n  async createCalendarEvent(eventData: any) {\n    const result = await db.insert(calendarEvents).values(eventData).returning();\n    return result[0];\n  },\n\n  async getCalendarEventByBookingId(bookingId: string) {\n    return db.query.calendarEvents.findFirst({\n      where: eq(calendarEvents.bookingId, bookingId)\n    });\n  },\n\n  async updateCalendarEvent(eventId: string, updateData: any) {\n    const result = await db.update(calendarEvents)\n      .set(updateData)\n      .where(eq(calendarEvents.id, eventId))\n      .returning();\n    return result[0];\n  },\n\n  async deleteCalendarEvent(eventId: string) {\n    await db.delete(calendarEvents).where(eq(calendarEvents.id, eventId));\n  },\n  \n  // Activity log operations\n  async logActivity(userId: string, action: string, resourceType: string, resourceId: string, details: string) {\n    return db.insert(activityLogs).values({\n      userId,\n      action,\n      resourceType,\n      resourceId,\n      details\n    }).returning();\n  },\n  \n  // Analytics operations\n  async getDailyRevenue(days: number = 7) {\n    // Get today's date\n    const today = new Date();\n    const result = [];\n    \n    // Generate data for each day\n    for (let i = 0; i < days; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateString = date.toISOString().split('T')[0];\n      \n      // Query bookings for this date\n      const dailyBookings = await db.query.bookings.findMany({\n        where: eq(bookings.bookingDate, dateString)\n      });\n      \n      // Calculate revenue and booking count\n      const revenue = dailyBookings.reduce((sum, booking) => sum + Number(booking.totalAmount), 0);\n      \n      result.push({\n        date: dateString,\n        revenue,\n        bookings: dailyBookings.length\n      });\n    }\n    \n    return result;\n  },\n  \n  async getPaymentMethodBreakdown() {\n    // Get all bookings\n    const allBookings = await db.query.bookings.findMany();\n    \n    // Calculate totals\n    const cash = allBookings.reduce((sum, booking) => sum + Number(booking.cashAmount), 0);\n    const upi = allBookings.reduce((sum, booking) => sum + Number(booking.upiAmount), 0);\n    \n    return { cash, upi };\n  },\n  \n  async getTimeSlotPerformance() {\n    // Get all bookings\n    const allBookings = await db.query.bookings.findMany();\n    \n    // Group by time slot\n    const slotMap = new Map();\n    \n    allBookings.forEach(booking => {\n      const slot = booking.timeSlot;\n      if (!slotMap.has(slot)) {\n        slotMap.set(slot, { timeSlot: slot, bookings: 0, revenue: 0 });\n      }\n      \n      const slotData = slotMap.get(slot);\n      slotData.bookings += 1;\n      slotData.revenue += Number(booking.totalAmount);\n    });\n    \n    return Array.from(slotMap.values());\n  },\n  \n  // Configuration operations\n  async getConfig() {\n    // Default configuration\n    const defaultConfig = {\n      theatres: ['Theatre 1', 'Theatre 2', 'Theatre 3'],\n      timeSlots: ['10:00 AM', '1:00 PM', '4:00 PM', '7:00 PM']\n    };\n    \n    try {\n      // Get theatres configuration\n      const theatresConfig = await db.query.configurations.findFirst({\n        where: eq(configurations.key, 'theatres')\n      });\n      \n      // Get time slots configuration\n      const timeSlotsConfig = await db.query.configurations.findFirst({\n        where: eq(configurations.key, 'timeSlots')\n      });\n      \n      return {\n        theatres: theatresConfig ? JSON.parse(theatresConfig.value) : defaultConfig.theatres,\n        timeSlots: timeSlotsConfig ? JSON.parse(timeSlotsConfig.value) : defaultConfig.timeSlots\n      };\n    } catch (error) {\n      console.error('Error fetching configuration:', error);\n      return defaultConfig;\n    }\n  },\n  \n  async updateConfig({ theatres, timeSlots }: { theatres: string[], timeSlots: string[] }, userId: string) {\n    try {\n      // Update theatres configuration\n      await db.insert(configurations)\n        .values({\n          key: 'theatres',\n          value: JSON.stringify(theatres),\n          updatedBy: userId\n        })\n        .onConflictDoUpdate({\n          target: configurations.key,\n          set: {\n            value: JSON.stringify(theatres),\n            updatedBy: userId,\n            updatedAt: sql`(CURRENT_TIMESTAMP)`\n          }\n        });\n      \n      // Update time slots configuration\n      await db.insert(configurations)\n        .values({\n          key: 'timeSlots',\n          value: JSON.stringify(timeSlots),\n          updatedBy: userId\n        })\n        .onConflictDoUpdate({\n          target: configurations.key,\n          set: {\n            value: JSON.stringify(timeSlots),\n            updatedBy: userId,\n            updatedAt: sql`(CURRENT_TIMESTAMP)`\n          }\n        });\n      \n      return { theatres, timeSlots };\n    } catch (error) {\n      console.error('Error updating configuration:', error);\n      throw error;\n    }\n  },\n  \n  // Sales report operations\n  async getSalesReports() {\n    return db.query.salesReports.findMany({\n      orderBy: [desc(salesReports.createdAt)]\n    });\n  },\n\n  async generateDailySalesReport(reportDate: string, reportData: any) {\n    const result = await db.insert(salesReports).values({\n      reportDate,\n      ...reportData\n    }).returning();\n    return result[0];\n  }\n};\n","size_bytes":11816},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  sqliteTable,\n  text,\n  integer,\n  real,\n} from \"drizzle-orm/sqlite-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Sessions\nexport const sessions = sqliteTable(\n  \"sessions\",\n  {\n    sid: text(\"sid\").primaryKey(),\n    sess: text(\"sess\").notNull(),\n    expire: text(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// Users\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\")\n    .primaryKey()\n    .default(\n      sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' || substr(hex(randomblob(2)),2) || '-' ||\n           substr('89ab',abs(random()) % 4 + 1, 1) || substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n    ),\n  email: text(\"email\").unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  passwordHash: text(\"password_hash\"),\n  role: text(\"role\").default(\"employee\"),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: text(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Bookings\nexport const bookings = sqliteTable(\"bookings\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  theatreName: text(\"theatre_name\").notNull(),\n  timeSlot: text(\"time_slot\").notNull(),\n  guests: integer(\"guests\").notNull(),\n  customerName: text(\"customer_name\").notNull(),\n  phoneNumber: text(\"phone_number\"),\n  age: integer(\"age\"),\n  totalAmount: real(\"total_amount\").notNull().default(0),\n  cashAmount: real(\"cash_amount\").notNull().default(0),\n  upiAmount: real(\"upi_amount\").notNull().default(0),\n  snacksAmount: real(\"snacks_amount\").notNull().default(0),\n  snacksCash: real(\"snacks_cash\").notNull().default(0),\n  snacksUpi: real(\"snacks_upi\").notNull().default(0),\n  bookingDate: text(\"booking_date\").notNull(),\n  isEighteenPlus: integer(\"is_eighteen_plus\", { mode: \"boolean\" }).notNull().default(true),\n  eighteenPlusReason: text(\"eighteen_plus_reason\"),\n  eighteenPlusDescription: text(\"eighteen_plus_description\"),\n  visited: integer(\"visited\", { mode: \"boolean\" }).notNull().default(true),\n  visitedReason: text(\"visited_reason\"),\n  visitedDescription: text(\"visited_description\"),\n  repeatCount: integer(\"repeat_count\").notNull().default(0),\n  createdBy: text(\"created_by\").references(() => users.id),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: text(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Expenses\nexport const expenses = sqliteTable(\"expenses\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  category: text(\"category\").notNull(),\n  description: text(\"description\").notNull(),\n  amount: real(\"amount\").notNull(),\n  expenseDate: text(\"expense_date\").notNull(),\n  createdBy: text(\"created_by\").references(() => users.id),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Leave Applications\nexport const leaveApplications = sqliteTable(\"leave_applications\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\").notNull(),\n  reason: text(\"reason\").notNull(),\n  status: text(\"status\").default(\"pending\"),\n  reviewedBy: text(\"reviewed_by\").references(() => users.id),\n  reviewedAt: text(\"reviewed_at\"),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Activity Logs\nexport const activityLogs = sqliteTable(\"activity_logs\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  userId: text(\"user_id\").references(() => users.id).notNull(),\n  action: text(\"action\").notNull(),\n  resourceType: text(\"resource_type\").notNull(),\n  resourceId: text(\"resource_id\"),\n  details: text(\"details\"),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Calendar Events\nexport const calendarEvents = sqliteTable(\"calendar_events\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  bookingId: text(\"booking_id\").references(() => bookings.id).notNull(),\n  googleCalendarEventId: text(\"google_calendar_event_id\"),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  location: text(\"location\"),\n  status: text(\"status\").default(\"confirmed\"),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n  updatedAt: text(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Sales Reports\nexport const salesReports = sqliteTable(\"sales_reports\", {\n  id: text(\"id\").primaryKey().default(\n    sql`(hex(randomblob(4)) || '-' || hex(randomblob(2)) || '-4' ||\n         substr(hex(randomblob(2)),2) || '-' ||\n         substr('89ab',abs(random()) % 4 + 1, 1) ||\n         substr(hex(randomblob(2)),2) || '-' || hex(randomblob(6)))`\n  ),\n  reportDate: text(\"report_date\").notNull(),\n  totalRevenue: real(\"total_revenue\").notNull().default(0),\n  foodSales: real(\"food_sales\").notNull().default(0),\n  screenSales: real(\"screen_sales\").notNull().default(0),\n  totalBookings: integer(\"total_bookings\").notNull().default(0),\n  totalGuests: integer(\"total_guests\").notNull().default(0),\n  avgBookingValue: real(\"avg_booking_value\").notNull().default(0),\n  createdBy: text(\"created_by\").references(() => users.id),\n  createdAt: text(\"created_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n// Configurations\nexport const configurations = sqliteTable(\"configurations\", {\n  key: text(\"key\").primaryKey(),\n  value: text(\"value\").notNull(),\n  updatedBy: text(\"updated_by\").references(() => users.id),\n  updatedAt: text(\"updated_at\").default(sql`(CURRENT_TIMESTAMP)`),\n});\n\n/* ---------------- SCHEMAS ---------------- */\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdBy: true,\n  createdAt: true,\n  updatedAt: true,\n  repeatCount: true,\n}).extend({\n  guests: z.coerce.number().min(1),\n  customerName: z.string().min(1, \"Customer name is required\"),\n  phoneNumber: z.string().min(10).max(15).optional(),\n  age: z.coerce.number().min(1).max(120).optional(),\n  totalAmount: z.coerce.number().min(0),\n  cashAmount: z.coerce.number().min(0),\n  upiAmount: z.coerce.number().min(0),\n  snacksAmount: z.coerce.number().min(0).optional(),\n  snacksCash: z.coerce.number().min(0).optional(),\n  snacksUpi: z.coerce.number().min(0).optional(),\n  isEighteenPlus: z.boolean().default(true),\n  eighteenPlusReason: z.string().optional(),\n  eighteenPlusDescription: z.string().optional(),\n  visited: z.boolean().default(true),\n  visitedReason: z.string().optional(),\n  visitedDescription: z.string().optional(),\n});\n\nexport const insertExpenseSchema = createInsertSchema(expenses).omit({\n  id: true,\n  createdBy: true,\n  createdAt: true,\n}).extend({\n  amount: z.coerce.number().min(0),\n});\n\nexport const insertLeaveApplicationSchema = createInsertSchema(leaveApplications).omit({\n  id: true,\n  status: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  createdAt: true,\n});\n\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,   // ✅ fixed camelCase\n  lastName: true,    // ✅ fixed camelCase\n  profileImageUrl: true,\n  role: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSalesReportSchema = createInsertSchema(salesReports).omit({\n  id: true,\n  createdBy: true,\n  createdAt: true,\n});\n\nexport const insertConfigurationSchema = createInsertSchema(configurations).omit({\n  updatedAt: true,\n});\n\n/* ---------------- TYPES ---------------- */\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertExpense = z.infer<typeof insertExpenseSchema>;\nexport type Expense = typeof expenses.$inferSelect;\nexport type InsertConfiguration = z.infer<typeof insertConfigurationSchema>;\nexport type Configuration = typeof configurations.$inferSelect;\nexport type InsertLeaveApplication = z.infer<typeof insertLeaveApplicationSchema>;\nexport type LeaveApplication = typeof leaveApplications.$inferSelect;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertSalesReport = z.infer<typeof insertSalesReportSchema>;\nexport type SalesReport = typeof salesReports.$inferSelect;\n","size_bytes":9777},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport LoginPage from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Bookings from \"@/pages/bookings\";\nimport Analytics from \"@/pages/analytics\";\nimport Expenses from \"@/pages/expenses\";\nimport LeaveManagement from \"@/pages/leave-management\";\nimport UserManagement from \"@/pages/user-management\";\nimport AdminPanel from \"@/pages/admin-panel\";\nimport Configuration from \"@/pages/configuration\";\nimport Verification from \"@/pages/verification\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-900 text-white\">\n        <div className=\"text-lg\">Loading ROSAE Theatre Management...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <LoginPage />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/bookings\" component={Bookings} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/expenses\" component={Expenses} />\n      <Route path=\"/leave-management\" component={LeaveManagement} />\n      <Route path=\"/user-management\" component={UserManagement} />\n      <Route path=\"/admin-panel\" component={AdminPanel} />\n      <Route path=\"/configuration\" component={Configuration} />\n      <Route path=\"/verification\" component={Verification} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1997},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --primary: hsl(222, 47.4%, 11.2%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47.4%, 11.2%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 47.4%, 11.2%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(222, 84%, 4.9%);\n  --radius: 0.5rem;\n\n  /* ROSAE Brand Colors */\n  --rosae-red: hsl(0, 73%, 48%);\n  --rosae-dark-red: hsl(0, 67%, 36%);\n  --rosae-black: hsl(220, 26%, 9%);\n  --rosae-dark-gray: hsl(217, 33%, 17%);\n}\n\n.dark {\n  --background: hsl(220, 26%, 9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(220, 26%, 9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(217, 33%, 17%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --primary: hsl(0, 73%, 48%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(217, 33%, 17%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(217, 33%, 17%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(217, 33%, 17%);\n\n  /* ROSAE Brand Colors for Dark Mode */\n  --rosae-red: hsl(0, 73%, 48%);\n  --rosae-dark-red: hsl(0, 67%, 36%);\n  --rosae-black: hsl(220, 26%, 9%);\n  --rosae-dark-gray: hsl(217, 33%, 17%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-rosae-black text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n\n  /* ROSAE Brand Color Utilities */\n  .bg-rosae-red {\n    background-color: var(--rosae-red);\n  }\n\n  .bg-rosae-dark-red {\n    background-color: var(--rosae-dark-red);\n  }\n\n  .bg-rosae-black {\n    background-color: var(--rosae-black);\n  }\n\n  .bg-rosae-dark-gray {\n    background-color: var(--rosae-dark-gray);\n  }\n\n  .text-rosae-red {\n    color: var(--rosae-red);\n  }\n\n  .text-rosae-dark-red {\n    color: var(--rosae-dark-red);\n  }\n\n  .border-rosae-red {\n    border-color: var(--rosae-red);\n  }\n\n  .hover\\:bg-rosae-red:hover {\n    background-color: var(--rosae-red);\n  }\n\n  .hover\\:bg-rosae-dark-red:hover {\n    background-color: var(--rosae-dark-red);\n  }\n\n  .hover\\:text-rosae-red:hover {\n    color: var(--rosae-red);\n  }\n\n  .hover\\:text-rosae-dark-red:hover {\n    color: var(--rosae-dark-red);\n  }\n\n  /* Focus states for form inputs */\n  .focus\\:border-rosae-red:focus {\n    border-color: var(--rosae-red);\n  }\n\n  .focus\\:ring-rosae-red:focus {\n    --tw-ring-color: var(--rosae-red);\n  }\n\n  /* Custom scrollbar for dark theme */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(217, 33%, 17%);\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(215, 20.2%, 65.1%);\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: var(--rosae-red);\n  }\n}\n\n@layer components {\n  /* Custom button variants for ROSAE theme */\n  .btn-rosae-primary {\n    @apply bg-rosae-red hover:bg-rosae-dark-red text-white font-medium px-4 py-2 rounded-lg transition-colors;\n  }\n\n  .btn-rosae-outline {\n    @apply border-2 border-rosae-red text-rosae-red hover:bg-rosae-red hover:text-white font-medium px-4 py-2 rounded-lg transition-colors;\n  }\n\n  /* Card styles matching the design */\n  .rosae-card {\n    @apply bg-rosae-dark-gray border border-gray-600 rounded-xl;\n  }\n\n  /* Input styles for the ROSAE theme */\n  .rosae-input {\n    @apply bg-gray-800 border border-gray-600 text-white placeholder-gray-400 focus:border-rosae-red focus:ring-2 focus:ring-rosae-red/20 focus:outline-none rounded-lg;\n  }\n\n  /* Select styles */\n  .rosae-select {\n    @apply bg-gray-800 border border-gray-600 text-white focus:border-rosae-red focus:ring-2 focus:ring-rosae-red/20 focus:outline-none rounded-lg;\n  }\n\n  /* Badge/Tag styles */\n  .rosae-badge {\n    @apply px-3 py-1 rounded-full text-xs font-medium;\n  }\n\n  .rosae-badge-success {\n    @apply rosae-badge bg-green-600/20 text-green-400;\n  }\n\n  .rosae-badge-warning {\n    @apply rosae-badge bg-yellow-600/20 text-yellow-400;\n  }\n\n  .rosae-badge-error {\n    @apply rosae-badge bg-red-600/20 text-red-400;\n  }\n\n  .rosae-badge-info {\n    @apply rosae-badge bg-blue-600/20 text-blue-400;\n  }\n\n  .rosae-badge-primary {\n    @apply rosae-badge bg-rosae-red/20 text-rosae-red;\n  }\n}\n\n/* Animation utilities */\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n\n  @keyframes slideUp {\n    from {\n      transform: translateY(10px);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n}\n","size_bytes":5258},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/migrations/add_phone_number.ts":{"content":"import { db } from '../db';\n\nasync function migrate() {\n  console.log('Running migration: add phone_number to bookings table');\n  \n  try {\n    // Check if the column already exists\n    const tableInfo = await db.all(`PRAGMA table_info(bookings)`);\n    const columnExists = tableInfo.some(column => column.name === 'phone_number');\n    \n    if (!columnExists) {\n      // Add the phone_number column\n      await db.run(`ALTER TABLE bookings ADD COLUMN phone_number TEXT`);\n      console.log('Successfully added phone_number column to bookings table');\n    } else {\n      console.log('phone_number column already exists in bookings table');\n    }\n  } catch (error) {\n    console.error('Migration failed:', error);\n    throw error;\n  }\n}\n\n// Run the migration\nmigrate().then(() => {\n  console.log('Migration completed successfully');\n  process.exit(0);\n}).catch((error) => {\n  console.error('Migration failed:', error);\n  process.exit(1);\n});","size_bytes":938},"client/src/components/booking-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X, Save } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { insertBookingSchema } from \"@shared/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\n// Default options (fallback if config is not loaded)\nconst DEFAULT_THEATRE_OPTIONS = [\n  \"Screen 1\",\n  \"Screen 2\", \n  \"Screen 3\",\n  \"VIP Screen\"\n];\n\nconst DEFAULT_TIME_SLOTS = [\n  \"2:30 PM\",\n  \"5:00 PM\",\n  \"8:15 PM\", \n  \"11:00 PM\"\n];\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: () => void;\n}\n\nexport function BookingModal({ isOpen, onClose, onSuccess }: BookingModalProps) {\n  const { toast } = useToast();\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n\n  // Fetch configuration for theatres and time slots\n  const { data: config } = useQuery({\n    queryKey: [\"/api/config\"],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Use config data or fallback to defaults\n  const theatreOptions = (config as { theatres?: string[] })?.theatres || DEFAULT_THEATRE_OPTIONS;\n  const timeSlots = (config as { timeSlots?: string[] })?.timeSlots || DEFAULT_TIME_SLOTS;\n\n  const form = useForm({\n    resolver: zodResolver(insertBookingSchema.extend({\n      totalAmount: insertBookingSchema.shape.totalAmount.refine(val => Number(val) > 0, \"Total amount must be greater than 0\"),\n      cashAmount: insertBookingSchema.shape.cashAmount.refine(val => Number(val) >= 0, \"Cash amount cannot be negative\"),\n      upiAmount: insertBookingSchema.shape.upiAmount.refine(val => Number(val) >= 0, \"UPI amount cannot be negative\"),\n    })),\n    defaultValues: {\n      theatreName: \"\",\n      timeSlot: \"\",\n      guests: \"1\",\n      customerName: \"\",\n      phoneNumber: \"\",\n      age: \"\",\n      totalAmount: \"\",\n      cashAmount: \"0\",\n      upiAmount: \"0\",\n      bookingDate: new Date().toISOString().split('T')[0],\n      isEighteenPlus: true,\n      eighteenPlusReason: \"\",\n      eighteenPlusDescription: \"\",\n      visited: true,\n      visitedReason: \"\",\n      visitedDescription: \"\",\n    },\n  });\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/bookings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Booking created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/daily-revenue\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/payment-methods\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/time-slots\"] });\n      form.reset();\n      onSuccess?.();\n      onClose();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateAmounts = () => {\n    const values = form.getValues();\n    const errors: string[] = [];\n\n    const totalAmount = Number(values.totalAmount) || 0;\n    const cashAmount = Number(values.cashAmount) || 0;\n    const upiAmount = Number(values.upiAmount) || 0;\n\n    // Validate main payment amounts\n    if (Math.abs((cashAmount + upiAmount) - totalAmount) > 0.01) {\n      errors.push(\"Cash + UPI must equal total amount\");\n    }\n\n    setValidationErrors(errors);\n    return errors.length === 0;\n  };\n\n  const onSubmit = (data: any) => {\n    if (!validateAmounts()) {\n      return;\n    }\n    createBookingMutation.mutate(data);\n  };\n\n  const handleClose = () => {\n    form.reset();\n    setValidationErrors([]);\n    onClose();\n  };\n\n  // Auto-calculate UPI when total or cash changes\n  const handleTotalOrCashChange = () => {\n    const totalAmount = Number(form.getValues(\"totalAmount\")) || 0;\n    const cashAmount = Number(form.getValues(\"cashAmount\")) || 0;\n    const calculatedUpi = Math.max(0, totalAmount - cashAmount);\n    form.setValue(\"upiAmount\", calculatedUpi.toString());\n    validateAmounts();\n  };\n\n\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"bg-rosae-dark-gray border-gray-600 text-white max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-white\">\n            New Theatre Booking\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n                control={form.control}\n                name=\"theatreName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Theatre Name</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\" data-testid=\"select-theatre-name\">\n                          <SelectValue placeholder=\"Select theatre\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-gray-800 border-gray-600\">\n                        {theatreOptions.map((theatre: string) => (\n                          <SelectItem key={theatre} value={theatre}>\n                            {theatre}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"timeSlot\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Time Slot</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\" data-testid=\"select-time-slot\">\n                          <SelectValue placeholder=\"Select time slot\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent className=\"bg-gray-800 border-gray-600\">\n                        {timeSlots.map((slot: string) => (\n                          <SelectItem key={slot} value={slot}>\n                            {slot}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"guests\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Number of Guests</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"4\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-guests\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"customerName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Customer Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"Enter customer name\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-customer-name\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Phone Number</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"tel\"\n                        placeholder=\"+91 9876543210\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-phone-number\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"age\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Age</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"120\"\n                        placeholder=\"25\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-age\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"bookingDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Booking Date</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-booking-date\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"totalAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Total Amount</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"1200\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-total-amount\"\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(e);\n                          setTimeout(handleTotalOrCashChange, 0);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"cashAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Amount Paid (Cash)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"800\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-cash-amount\"\n                        {...field}\n                        onChange={(e) => {\n                          field.onChange(e);\n                          setTimeout(handleTotalOrCashChange, 0);\n                        }}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"upiAmount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-300\">Amount Paid (UPI)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"400\"\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                        data-testid=\"input-upi-amount\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* 18+ Status Toggle */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"isEighteenPlus\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-gray-600 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-gray-300\">18+ Content</FormLabel>\n                      <div className=\"text-sm text-gray-400\">\n                        Is this booking for 18+ content?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-eighteen-plus\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              {!form.watch(\"isEighteenPlus\") && (\n                <div className=\"space-y-4 pl-4 border-l-2 border-red-500\">\n                  <FormField\n                    control={form.control}\n                    name=\"eighteenPlusReason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Reason for No</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                              <SelectValue placeholder=\"Select reason\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            <SelectItem value=\"cancelled_show\">Cancelled Show</SelectItem>\n                            <SelectItem value=\"refunded\">Refunded</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"eighteenPlusDescription\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Enter description for the reason\"\n                            className=\"bg-gray-800 border-gray-600 text-white\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n\n            {/* Visited Status Toggle */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"visited\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border border-gray-600 p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base text-gray-300\">Visited</FormLabel>\n                      <div className=\"text-sm text-gray-400\">\n                        Did the customer visit for this booking?\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-visited\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              {!form.watch(\"visited\") && (\n                <div className=\"space-y-4 pl-4 border-l-2 border-yellow-500\">\n                  <FormField\n                    control={form.control}\n                    name=\"visitedReason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Reason for No</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                              <SelectValue placeholder=\"Select reason\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                            <SelectItem value=\"rescheduled\">Rescheduled</SelectItem>\n                            <SelectItem value=\"by_mistake\">By Mistake</SelectItem>\n                            <SelectItem value=\"didnt_come\">Didn't Come</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"visitedDescription\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Enter description for the reason\"\n                            className=\"bg-gray-800 border-gray-600 text-white\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              )}\n            </div>\n\n\n\n            <div className=\"flex items-center justify-between pt-6 border-t border-gray-600\">\n              <div className=\"text-sm\">\n                {validationErrors.length > 0 && (\n                  <div className=\"space-y-1\">\n                    {validationErrors.map((error, index) => (\n                      <p key={index} className=\"text-rosae-red\" data-testid=\"text-validation-error\">\n                        {error}\n                      </p>\n                    ))}\n                  </div>\n                )}\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleClose}\n                  className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                  data-testid=\"button-cancel-booking\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createBookingMutation.isPending || validationErrors.length > 0}\n                  className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                  data-testid=\"button-save-booking\"\n                >\n                  <Save className=\"mr-2 w-4 h-4\" />\n                  {createBookingMutation.isPending ? \"Saving...\" : \"Save Booking\"}\n                </Button>\n              </div>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":22110},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookingModal } from \"./booking-modal\";\nimport { Bell, Ticket } from \"lucide-react\";\n\nconst pageMetadata = {\n  \"/\": {\n    title: \"Dashboard Overview\",\n    description: \"Welcome back, manage your theatre operations\"\n  },\n  \"/bookings\": {\n    title: \"Theatre Bookings\",\n    description: \"Manage and view all theatre bookings\"\n  },\n  \"/analytics\": {\n    title: \"Analytics Dashboard\", \n    description: \"Comprehensive data visualization and business insights\"\n  },\n  \"/expenses\": {\n    title: \"Expense Management\",\n    description: \"Track and manage all business expenses\"\n  },\n  \"/leave-management\": {\n    title: \"Leave Management\",\n    description: \"Manage leave applications and approvals\"\n  },\n  \"/user-management\": {\n    title: \"User Management\",\n    description: \"Manage users and their access permissions\"\n  }\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n\n  const currentPage = pageMetadata[location as keyof typeof pageMetadata] || pageMetadata[\"/\"];\n\n  return (\n    <>\n      <header className=\"bg-rosae-dark-gray shadow-sm border-b border-gray-600\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">\n                {currentPage.title}\n              </h2>\n              <p className=\"text-gray-400\" data-testid=\"text-page-description\">\n                {currentPage.description}\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                onClick={() => setIsBookingModalOpen(true)}\n                className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2 rounded-lg font-medium transition-colors\"\n                data-testid=\"button-header-quick-booking\"\n              >\n                <Ticket className=\"mr-2 w-4 h-4\" />\n                Quick Booking\n              </Button>\n              <button \n                className=\"relative p-2 text-gray-400 hover:text-white transition-colors\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"w-5 h-5\" />\n                <span className=\"absolute -top-1 -right-1 bg-rosae-red text-xs rounded-full w-5 h-5 flex items-center justify-center text-white\">\n                  3\n                </span>\n              </button>\n\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <BookingModal \n        isOpen={isBookingModalOpen} \n        onClose={() => setIsBookingModalOpen(false)} \n      />\n    </>\n  );\n}\n","size_bytes":2789},"client/src/components/layout.tsx":{"content":"import { Sidebar } from \"@/components/sidebar\";\nimport { SidebarProvider, useSidebar } from \"@/contexts/SidebarContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Menu } from \"lucide-react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nfunction LayoutContent({ children }: LayoutProps) {\n  const { isOpen, toggle } = useSidebar();\n\n  return (\n    <div className=\"flex min-h-screen bg-rosae-black\">\n      <Sidebar />\n      <main className={cn(\n        \"flex-1 transition-all duration-300 ease-in-out\",\n        \"lg:ml-0\",\n        isOpen ? \"lg:ml-0\" : \"lg:ml-0\"\n      )}>\n        {/* Mobile header with hamburger menu */}\n        <div className=\"lg:hidden bg-rosae-dark-gray border-b border-gray-600 p-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggle}\n            className=\"text-white hover:bg-gray-700\"\n            data-testid=\"button-open-sidebar\"\n          >\n            <Menu className=\"w-6 h-6\" />\n          </Button>\n        </div>\n        <div className=\"min-h-full\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport function Layout({ children }: LayoutProps) {\n  return (\n    <SidebarProvider>\n      <LayoutContent>{children}</LayoutContent>\n    </SidebarProvider>\n  );\n}\n\nexport default Layout;","size_bytes":1341},"client/src/components/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useAuth, type User } from \"@/hooks/useAuth\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Theater,\n  BarChart3, \n  Plus, \n  Ticket, \n  PieChart, \n  Wallet, \n  Calendar, \n  Users,\n  LogOut,\n  Shield,\n  Settings,\n  ClipboardCheck,\n  X\n} from \"lucide-react\";\n\nconst navigationItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: BarChart3,\n  },\n  {\n    name: \"New Booking\",\n    href: \"/bookings\",\n    icon: Plus,\n    action: \"new-booking\"\n  },\n  {\n    name: \"All Bookings\", \n    href: \"/bookings\",\n    icon: Ticket,\n  },\n  {\n    name: \"Analytics\",\n    href: \"/analytics\", \n    icon: PieChart,\n  },\n  {\n    name: \"Verification\",\n    href: \"/verification\",\n    icon: ClipboardCheck,\n  },\n  {\n    name: \"Expenses\",\n    href: \"/expenses\",\n    icon: Wallet,\n  },\n  {\n    name: \"Leave Management\",\n    href: \"/leave-management\",\n    icon: Calendar,\n  },\n  {\n    name: \"Customer Tickets\",\n    href: \"/customer-tickets\", \n    icon: Ticket,\n  },\n];\n\nconst adminOnlyItems = [\n  {\n    name: \"User Management\", \n    href: \"/user-management\",\n    icon: Users,\n  },\n];\n\nconst adminNavigationItems = [\n  {\n    name: \"Admin Panel\",\n    href: \"/admin-panel\",\n    icon: Shield,\n    adminOnly: true,\n  },\n  {\n    name: \"Configuration\",\n    href: \"/configuration\",\n    icon: Settings,\n    adminOnly: true,\n  },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const { isOpen, close } = useSidebar();\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('/api/auth/logout', {\n        method: 'POST',\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Logged out successfully\",\n          description: \"You have been logged out of the system\",\n        });\n        window.location.reload();\n      } else {\n        toast({\n          title: \"Logout failed\",\n          description: \"Please try again\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"Network error occurred\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <>\n      {/* Overlay for mobile */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden\"\n          onClick={close}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n      \n      <div\n        className={cn(\n          \"fixed top-0 left-0 h-full w-64 bg-rosae-dark-gray shadow-xl flex flex-col transform transition-transform duration-300 ease-in-out z-50\",\n          \"lg:relative lg:translate-x-0\",\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        )}\n        data-testid=\"sidebar-panel\"\n      >\n        {/* Logo Section */}\n        <div className=\"p-6 border-b border-gray-600\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-rosae-red rounded-lg flex items-center justify-center\">\n                <Theater className=\"text-white text-xl\" data-testid=\"icon-logo\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white\" data-testid=\"text-brand-name\">ROSAE</h1>\n                <p className=\"text-gray-400 text-sm\">Theatre Management</p>\n              </div>\n            </div>\n            <button\n              onClick={close}\n              className=\"lg:hidden text-gray-400 hover:text-white transition-colors\"\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n        </div>\n\n      {/* Navigation */}\n      <nav className=\"mt-6 flex-1\">\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || \n            (item.href === \"/\" && location === \"/\") ||\n            (item.href !== \"/\" && location.startsWith(item.href));\n\n          return (\n            <a\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"flex items-center px-6 py-3 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors\",\n                isActive && \"text-white bg-rosae-red/20 border-r-4 border-rosae-red\"\n              )}\n              data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Icon className=\"mr-3 w-5 h-5\" />\n              {item.name}\n            </a>\n          );\n        })}\n        \n        {/* Admin-only navigation */}\n        {user && user.role === 'admin' && (\n          <div className=\"mt-6 border-t border-gray-600 pt-6\">\n            {adminOnlyItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n\n              return (\n                <a\n                  key={item.name}\n                  href={item.href}\n                  className={cn(\n                    \"flex items-center px-6 py-3 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors\",\n                    isActive && \"text-white bg-rosae-red/20 border-r-4 border-rosae-red\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Icon className=\"mr-3 w-5 h-5\" />\n                  {item.name}\n                </a>\n              );\n            })}\n            {adminNavigationItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n\n              return (\n                <a\n                  key={item.name}\n                  href={item.href}\n                  className={cn(\n                    \"flex items-center px-6 py-3 text-gray-300 hover:text-white hover:bg-gray-700 transition-colors\",\n                    isActive && \"text-white bg-rosae-red/20 border-r-4 border-rosae-red\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <Icon className=\"mr-3 w-5 h-5\" />\n                  {item.name}\n                </a>\n              );\n            })}\n          </div>\n        )}\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-6 border-t border-gray-600\">\n        <div className=\"flex items-center space-x-3\">\n          {user && user.profileImageUrl ? (\n            <img \n              src={user.profileImageUrl} \n              alt=\"User Avatar\" \n              className=\"w-10 h-10 rounded-full object-cover\"\n              data-testid=\"img-user-avatar\"\n            />\n          ) : (\n            <div className=\"w-10 h-10 bg-rosae-red/20 rounded-full flex items-center justify-center\">\n              <Users className=\"w-5 h-5 text-rosae-red\" />\n            </div>\n          )}\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-medium text-white\" data-testid=\"text-user-name\">\n              {user && (user.firstName || user.lastName) ? \n                `${user.firstName || ''} ${user.lastName || ''}`.trim() : \n                'User'\n              }\n            </p>\n            <p className=\"text-xs text-gray-400\" data-testid=\"text-user-role\">\n              {user && user.role === 'admin' ? 'Admin' : 'Employee'}\n            </p>\n          </div>\n          <button \n            onClick={handleLogout}\n            className=\"text-gray-400 hover:text-white transition-colors\"\n            title=\"Sign Out\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-5 h-5\" />\n          </button>\n        </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":7817},"client/src/contexts/SidebarContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface SidebarContextType {\n  isOpen: boolean;\n  toggle: () => void;\n  open: () => void;\n  close: () => void;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\nexport function SidebarProvider({ children }: { children: ReactNode }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(prev => !prev);\n  const open = () => setIsOpen(true);\n  const close = () => setIsOpen(false);\n\n  return (\n    <SidebarContext.Provider value={{ isOpen, toggle, open, close }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n}\n\nexport function useSidebar() {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n}","size_bytes":861},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport React from \"react\";\n\nexport interface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string | null;\n  role?: 'admin' | 'employee';\n  createdAt?: string;\n}\n\nexport function useAuth() {\n  const { data: authStatus, isLoading, error } = useQuery<{ authenticated: boolean; user?: User }>({\n    queryKey: [\"/api/auth/status\"],\n    retry: false,\n  });\n\n  console.log('useAuth hook - authStatus:', authStatus);\n  console.log('useAuth hook - isLoading:', isLoading);\n  console.log('useAuth hook - error:', error);\n\n  return {\n    user: authStatus?.user,\n    isLoading,\n    isAuthenticated: authStatus?.authenticated || false,\n  };\n}\n","size_bytes":735},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Shield, Users, Settings, TrendingUp, Plus, X, Edit, Trash2 } from \"lucide-react\";\n\ninterface Config {\n  theatres: string[];\n  timeSlots: string[];\n}\n\nexport default function AdminPanel() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isConfigDialogOpen, setIsConfigDialogOpen] = useState(false);\n  const [newTheatre, setNewTheatre] = useState('');\n  const [newTimeSlot, setNewTimeSlot] = useState('');\n\n  // Redirect to home if not authenticated or not admin\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: users, isLoading: isUsersLoading } = useQuery<any[]>({\n    queryKey: [\"/api/users\"],\n    enabled: user?.role === 'admin',\n  });\n\n  const { data: config, isLoading: isConfigLoading } = useQuery<Config>({\n    queryKey: [\"/api/config\"],\n    enabled: user?.role === 'admin',\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (config: Config) => {\n      return await apiRequest(\"POST\", `/api/config`, config);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/config\"] });\n      toast({\n        title: \"Configuration updated\",\n        description: \"Theatre and time slot settings have been saved.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddTheatre = () => {\n    if (!newTheatre.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a theatre name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (config) {\n      const updatedConfig = {\n        ...config,\n        theatres: [...config.theatres, newTheatre.trim()]\n      };\n      updateConfigMutation.mutate(updatedConfig);\n      setNewTheatre('');\n    }\n  };\n\n  const handleAddTimeSlot = () => {\n    if (!newTimeSlot.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a time slot\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (config) {\n      const updatedConfig = {\n        ...config,\n        timeSlots: [...config.timeSlots, newTimeSlot.trim()]\n      };\n      updateConfigMutation.mutate(updatedConfig);\n      setNewTimeSlot('');\n    }\n  };\n\n  const handleRemoveTheatre = (theatre: string) => {\n    if (config) {\n      const updatedConfig = {\n        ...config,\n        theatres: config.theatres.filter(t => t !== theatre)\n      };\n      updateConfigMutation.mutate(updatedConfig);\n    }\n  };\n\n  const handleRemoveTimeSlot = (timeSlot: string) => {\n    if (config) {\n      const updatedConfig = {\n        ...config,\n        timeSlots: config.timeSlots.filter(t => t !== timeSlot)\n      };\n      updateConfigMutation.mutate(updatedConfig);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Access Denied - Admin Only</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-rosae-black\">\n      <Sidebar />\n      <div className=\"flex-1 p-8\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white flex items-center\">\n                <Shield className=\"mr-3 h-8 w-8 text-rosae-red\" />\n                Admin Panel\n              </h1>\n              <p className=\"text-gray-400\">Manage users, roles, and system settings</p>\n            </div>\n          </div>\n\n          {/* Admin Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Total Users</p>\n                    <p className=\"text-2xl font-bold text-white\">\n                      {isUsersLoading ? \"...\" : users?.length || 0}\n                    </p>\n                  </div>\n                  <Users className=\"w-8 h-8 text-rosae-red\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Theatres</p>\n                    <p className=\"text-2xl font-bold text-white\">\n                      {isConfigLoading ? \"...\" : config?.theatres.length || 0}\n                    </p>\n                  </div>\n                  <Settings className=\"w-8 h-8 text-blue-400\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-gray-400 text-sm\">Time Slots</p>\n                    <p className=\"text-2xl font-bold text-white\">\n                      {isConfigLoading ? \"...\" : config?.timeSlots.length || 0}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"w-8 h-8 text-green-400\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Configuration Management */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Theatre Management */}\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2 text-blue-400\" />\n                  Theatre Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Enter theatre name\"\n                    value={newTheatre}\n                    onChange={(e) => setNewTheatre(e.target.value)}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                  <Button\n                    onClick={handleAddTheatre}\n                    disabled={updateConfigMutation.isPending}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {config?.theatres.map((theatre, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                      <span className=\"text-white\">{theatre}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleRemoveTheatre(theatre)}\n                        className=\"border-red-600 text-red-400 hover:bg-red-600/20\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Time Slot Management */}\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-green-400\" />\n                  Time Slot Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    placeholder=\"Enter time slot (e.g., 10:00 AM - 12:00 PM)\"\n                    value={newTimeSlot}\n                    onChange={(e) => setNewTimeSlot(e.target.value)}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                  <Button\n                    onClick={handleAddTimeSlot}\n                    disabled={updateConfigMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    <Plus className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  {config?.timeSlots.map((timeSlot, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\">\n                      <span className=\"text-white\">{timeSlot}</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleRemoveTimeSlot(timeSlot)}\n                        className=\"border-red-600 text-red-400 hover:bg-red-600/20\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* User Management */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600 mt-8\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Users className=\"w-5 h-5 mr-2 text-rosae-red\" />\n                User Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isUsersLoading ? (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-gray-400\">Loading users...</div>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {users?.map((user) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 bg-gray-800 rounded-lg\">\n                      <div>\n                        <p className=\"text-white font-medium\">\n                          {user.firstName} {user.lastName}\n                        </p>\n                        <p className=\"text-gray-400 text-sm\">{user.email}</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge \n                          className={user.role === 'admin' \n                            ? 'bg-red-500/20 text-red-400' \n                            : 'bg-blue-500/20 text-blue-400'\n                          }\n                        >\n                          {user.role}\n                        </Badge>\n                        <Select\n                          value={user.role}\n                          onValueChange={(role) => updateUserRoleMutation.mutate({ userId: user.id, role })}\n                        >\n                          <SelectTrigger className=\"w-32 bg-gray-700 border-gray-600\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-gray-800 border-gray-600\">\n                            <SelectItem value=\"employee\">Employee</SelectItem>\n                            <SelectItem value=\"admin\">Admin</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14413},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { BarChart3, TrendingUp, PieChart } from \"lucide-react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n  LineChart,\n  Line,\n  Area,\n  AreaChart\n} from \"recharts\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: dailyRevenue, isLoading: isDailyRevenueLoading, error: dailyRevenueError } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/daily-revenue?days=30\"],\n  });\n\n  const { data: paymentMethods, isLoading: isPaymentMethodsLoading, error: paymentMethodsError } = useQuery<any>({\n    queryKey: [\"/api/analytics/payment-methods\"],\n  });\n\n  const { data: timeSlots, isLoading: isTimeSlotsLoading, error: timeSlotsError } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/time-slots\"],\n  });\n\n  // Handle errors\n  useEffect(() => {\n    const errors = [dailyRevenueError, paymentMethodsError, timeSlotsError];\n    errors.forEach(error => {\n      if (error && isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    });\n  }, [dailyRevenueError, paymentMethodsError, timeSlotsError, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (value: number) => {\n    return `₹${value.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', { \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  const cashAmount = paymentMethods?.cash || 0;\n  const upiAmount = paymentMethods?.upi || 0;\n  const totalPayments = cashAmount + upiAmount;\n  const cashPercentage = totalPayments > 0 ? (cashAmount / totalPayments) * 100 : 0;\n  const upiPercentage = totalPayments > 0 ? (upiAmount / totalPayments) * 100 : 0;\n\n  const pieData = [\n    { name: 'Cash', value: cashPercentage, amount: cashAmount },\n    { name: 'UPI', value: upiPercentage, amount: upiAmount },\n  ];\n\n  const COLORS = ['#10B981', '#8B5CF6'];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">Analytics Dashboard</h2>\n            <p className=\"text-gray-400\">Comprehensive data visualization and business insights</p>\n          </div>\n        </div>\n\n        {/* Revenue Trends */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Monthly Revenue Trend */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-white flex items-center\" data-testid=\"text-monthly-revenue-title\">\n                  <TrendingUp className=\"w-5 h-5 mr-2 text-rosae-red\" />\n                  Monthly Revenue Trend\n                </h3>\n              </div>\n              <div className=\"h-80\">\n                {isDailyRevenueLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : dailyRevenue && dailyRevenue.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={dailyRevenue}>\n                      <defs>\n                        <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                          <stop offset=\"5%\" stopColor=\"#DC2626\" stopOpacity={0.8}/>\n                          <stop offset=\"95%\" stopColor=\"#DC2626\" stopOpacity={0}/>\n                        </linearGradient>\n                      </defs>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        stroke=\"#9CA3AF\" \n                        tickFormatter={formatDate}\n                      />\n                      <YAxis \n                        stroke=\"#9CA3AF\" \n                        tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`} \n                      />\n                      <Tooltip \n                        formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n                        labelFormatter={(label) => formatDate(label)}\n                      />\n                      <Area \n                        type=\"monotone\" \n                        dataKey=\"revenue\" \n                        stroke=\"#DC2626\" \n                        fillOpacity={1} \n                        fill=\"url(#colorRevenue)\" \n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">No revenue data available</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Show Count vs Revenue */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-white flex items-center\" data-testid=\"text-shows-vs-revenue-title\">\n                  <BarChart3 className=\"w-5 h-5 mr-2 text-rosae-red\" />\n                  Daily Shows vs Revenue\n                </h3>\n              </div>\n              <div className=\"h-80\">\n                {isDailyRevenueLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : dailyRevenue && dailyRevenue.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={dailyRevenue}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        stroke=\"#9CA3AF\" \n                        tickFormatter={formatDate}\n                      />\n                      <YAxis \n                        yAxisId=\"bookings\"\n                        orientation=\"left\"\n                        stroke=\"#8B5CF6\" \n                      />\n                      <YAxis \n                        yAxisId=\"revenue\"\n                        orientation=\"right\"\n                        stroke=\"#DC2626\" \n                        tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}\n                      />\n                      <Tooltip \n                        formatter={(value: number, name: string) => [\n                          name === 'revenue' ? formatCurrency(value) : value,\n                          name === 'revenue' ? 'Revenue' : 'Bookings'\n                        ]}\n                        labelFormatter={(label) => formatDate(label)}\n                      />\n                      <Bar yAxisId=\"bookings\" dataKey=\"bookings\" fill=\"#8B5CF6\" name=\"bookings\" />\n                      <Bar yAxisId=\"revenue\" dataKey=\"revenue\" fill=\"#DC2626\" name=\"revenue\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">No data available</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payment Analysis & Time Slot Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Enhanced Payment Methods Breakdown */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6 flex items-center\" data-testid=\"text-payment-breakdown-title\">\n                <PieChart className=\"w-5 h-5 mr-2 text-rosae-red\" />\n                Payment Methods Breakdown\n              </h3>\n              <div className=\"h-80\">\n                {isPaymentMethodsLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : (\n                  <div className=\"flex items-center justify-between h-full\">\n                    <div className=\"w-1/2\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <RechartsPieChart>\n                          <Pie\n                            data={pieData}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            innerRadius={40}\n                            dataKey=\"value\"\n                            label={({ name, value }) => `${name}: ${value.toFixed(1)}%`}\n                          >\n                            {pieData.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value: number) => `${value.toFixed(1)}%`} />\n                        </RechartsPieChart>\n                      </ResponsiveContainer>\n                    </div>\n                    <div className=\"w-1/2 pl-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 bg-gray-800 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-green-400 font-medium\">Cash Payments</span>\n                            <span className=\"text-white font-bold\">{formatCurrency(cashAmount)}</span>\n                          </div>\n                          <div className=\"text-sm text-gray-400\">{cashPercentage.toFixed(1)}% of total revenue</div>\n                        </div>\n                        <div className=\"p-4 bg-gray-800 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-purple-400 font-medium\">UPI Payments</span>\n                            <span className=\"text-white font-bold\">{formatCurrency(upiAmount)}</span>\n                          </div>\n                          <div className=\"text-sm text-gray-400\">{upiPercentage.toFixed(1)}% of total revenue</div>\n                        </div>\n                        <div className=\"p-4 bg-rosae-red/10 border border-rosae-red/20 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"text-rosae-red font-medium\">Total Revenue</span>\n                            <span className=\"text-white font-bold\">{formatCurrency(totalPayments)}</span>\n                          </div>\n                          <div className=\"text-sm text-gray-400\">Combined payment methods</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Time Slot Analysis */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-time-slot-analysis-title\">Time Slot Performance Analysis</h3>\n              <div className=\"h-80\">\n                {isTimeSlotsLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : timeSlots && timeSlots.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={timeSlots} layout=\"horizontal\">\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis \n                        type=\"number\" \n                        stroke=\"#9CA3AF\" \n                        tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}\n                      />\n                      <YAxis type=\"category\" dataKey=\"timeSlot\" stroke=\"#9CA3AF\" width={80} />\n                      <Tooltip \n                        formatter={(value: number) => [formatCurrency(value), 'Revenue']}\n                      />\n                      <Bar \n                        dataKey=\"revenue\" \n                        fill=\"#DC2626\" \n                        radius={[0, 4, 4, 0]}\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">No time slot data available</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Guest Distribution Analysis */}\n        {timeSlots && timeSlots.length > 0 && (\n          <Card className=\"bg-rosae-dark-gray border-gray-600 mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-guest-distribution-title\">Guest Distribution by Time Slot</h3>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={timeSlots || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                    <XAxis dataKey=\"timeSlot\" stroke=\"#9CA3AF\" />\n                    <YAxis stroke=\"#9CA3AF\" />\n                    <Tooltip \n                      formatter={(value: number) => [value, 'Total Bookings']}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"bookings\" \n                      stroke=\"#DC2626\" \n                      strokeWidth={3}\n                      dot={{ fill: '#DC2626', strokeWidth: 2, r: 6 }}\n                      activeDot={{ r: 8, stroke: '#DC2626', strokeWidth: 2 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":15324},"client/src/pages/bookings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { BookingModal } from \"@/components/booking-modal\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar, Users, IndianRupee, Search, X, Edit, Trash2, Phone, ChevronLeft, ChevronRight, Printer } from \"lucide-react\";\n\nexport default function Bookings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [editingBooking, setEditingBooking] = useState<any>(null);\n  const [deletingBooking, setDeletingBooking] = useState<any>(null);\n  const [deleteReason, setDeleteReason] = useState(\"\");\n  const [deleteComment, setDeleteComment] = useState(\"\");\n  \n  // Pagination states\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize] = useState(10);\n  \n  // Filter states\n  const [dateFilter, setDateFilter] = useState(\"\");\n  const [phoneFilter, setPhoneFilter] = useState(\"\");\n  const [bookingDateFilter, setBookingDateFilter] = useState(\"\");\n  const [repeatCountFilter, setRepeatCountFilter] = useState(\"\");\n  const [filteredBookings, setFilteredBookings] = useState<any[]>([]);\n  \n  // Date range filter states\n  const [startDateFilter, setStartDateFilter] = useState(\"\");\n  const [endDateFilter, setEndDateFilter] = useState(\"\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data, isLoading: isBookingsLoading, refetch, error: bookingsError } = useQuery({\n    queryKey: [\"/api/bookings\", currentPage, pageSize, dateFilter, phoneFilter, bookingDateFilter, repeatCountFilter],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        pageSize: pageSize.toString(),\n        ...(dateFilter && { dateFilter }),\n        ...(phoneFilter && { phoneFilter }),\n        ...(bookingDateFilter && { bookingDateFilter }),\n        ...(repeatCountFilter && { repeatCountFilter })\n      });\n      const response = await fetch(`/api/bookings?${params}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch bookings');\n      }\n      return response.json();\n    },\n  });\n\n  // Edit booking mutation\n  const editBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest(\"PATCH\", `/api/bookings/${editingBooking.id}`, bookingData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Booking updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      setIsEditModalOpen(false);\n      setEditingBooking(null);\n      refetch();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete booking mutation\n  const deleteBookingMutation = useMutation({\n    mutationFn: async ({ bookingId, reason, comment }: { bookingId: string; reason: string; comment?: string }) => {\n      return await apiRequest(\"DELETE\", `/api/bookings/${bookingId}`, { reason, comment });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Booking deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      setIsDeleteModalOpen(false);\n      setDeletingBooking(null);\n      setDeleteReason(\"\");\n      setDeleteComment(\"\");\n      refetch();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  \n  // Reset to first page when filters change\n  useEffect(() => {\n    setCurrentPage(1);\n  }, [dateFilter, phoneFilter, bookingDateFilter]);\n\n  // Handle booking errors\n  useEffect(() => {\n    if (bookingsError && isUnauthorizedError(bookingsError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [bookingsError, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (value: number) => {\n    return `₹${value.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  const getPaymentStatus = (totalAmount: number) => {\n    return totalAmount <= 750 ? 'partial' : 'full';\n  };\n\n  const handleEditBooking = (booking: any) => {\n    setEditingBooking(booking);\n    setIsEditModalOpen(true);\n  };\n\n  const handleDeleteBooking = (booking: any) => {\n    setDeletingBooking(booking);\n    setIsDeleteModalOpen(true);\n  };\n\n  const handlePageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const totalPages = data?.pagination?.totalPages || 0;\n  const currentBookings = data?.bookings || [];\n\n  // Print functionality\n  const handlePrint = () => {\n    let bookingsToPrint = currentBookings;\n    \n    // Apply date range filter if set\n    if (startDateFilter && endDateFilter) {\n      bookingsToPrint = currentBookings.filter((booking: any) => {\n        const bookingDate = new Date(booking.bookingDate);\n        const startDate = new Date(startDateFilter);\n        const endDate = new Date(endDateFilter);\n        return bookingDate >= startDate && bookingDate <= endDate;\n      });\n    }\n\n    // Create print content\n    const printContent = `\n      <html>\n        <head>\n          <title>ROSAE Theatre Bookings Report</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            h1 { color: #dc2626; text-align: center; margin-bottom: 20px; }\n            .date-range { text-align: center; margin-bottom: 20px; color: #666; }\n            table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            th { background-color: #f2f2f2; font-weight: bold; }\n            tr:nth-child(even) { background-color: #f9f9f9; }\n            .status { padding: 2px 8px; border-radius: 4px; font-size: 12px; }\n            .yes { background-color: #dcfce7; color: #166534; }\n            .no { background-color: #fecaca; color: #991b1b; }\n            .partial { background-color: #fef3c7; color: #92400e; }\n            .footer { margin-top: 30px; text-align: center; color: #666; font-size: 12px; }\n          </style>\n        </head>\n        <body>\n          <h1>ROSAE Theatre Bookings Report</h1>\n          ${startDateFilter && endDateFilter ? \n            `<div class=\"date-range\">Date Range: ${formatDate(startDateFilter)} to ${formatDate(endDateFilter)}</div>` :\n            `<div class=\"date-range\">All Bookings</div>`\n          }\n          <table>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Customer Name</th>\n                <th>Theatre</th>\n                <th>Time Slot</th>\n                <th>Guests</th>\n                <th>Phone</th>\n                <th>18+</th>\n                <th>Visited</th>\n                <th>Repeat Count</th>\n                <th>Total Amount</th>\n                <th>Cash</th>\n                <th>UPI</th>\n                <th>Snacks Total</th>\n                <th>Snacks Cash</th>\n                <th>Snacks UPI</th>\n                <th>Status</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${bookingsToPrint.map((booking: any) => `\n                <tr>\n                  <td>${formatDate(booking.bookingDate)}</td>\n                  <td>${booking.customerName || 'N/A'}</td>\n                  <td>${booking.theatreName}</td>\n                  <td>${booking.timeSlot}</td>\n                  <td>${booking.guests}</td>\n                  <td>${booking.phoneNumber || 'N/A'}</td>\n                  <td><span class=\"status ${booking.isEighteenPlus ? 'yes' : 'no'}\">${booking.isEighteenPlus ? 'Yes' : 'No'}</span></td>\n                  <td><span class=\"status ${booking.visited ? 'yes' : 'no'}\">${booking.visited ? 'Yes' : 'No'}</span></td>\n                  <td>${booking.repeatCount || 0}</td>\n                  <td>${formatCurrency(Number(booking.totalAmount))}</td>\n                  <td>${formatCurrency(Number(booking.cashAmount))}</td>\n                  <td>${formatCurrency(Number(booking.upiAmount))}</td>\n                  <td>${formatCurrency(Number(booking.snacksAmount || 0))}</td>\n                  <td>${formatCurrency(Number(booking.snacksCash || 0))}</td>\n                  <td>${formatCurrency(Number(booking.snacksUpi || 0))}</td>\n                  <td><span class=\"status ${getPaymentStatus(Number(booking.totalAmount)) === 'full' ? 'yes' : 'partial'}\">${getPaymentStatus(Number(booking.totalAmount)) === 'full' ? 'Full Payment' : 'Partial Payment'}</span></td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n          <div class=\"footer\">\n            Generated on ${new Date().toLocaleDateString('en-IN')} | Total Bookings: ${bookingsToPrint.length}\n          </div>\n        </body>\n      </html>\n    `;\n\n    const printWindow = window.open('', '_blank');\n    if (printWindow) {\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      printWindow.focus();\n      printWindow.print();\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">All Bookings</h2>\n            <p className=\"text-gray-400\">Manage and view all theatre bookings</p>\n          </div>\n          <Button \n            onClick={() => setIsBookingModalOpen(true)}\n            className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2\"\n            data-testid=\"button-new-booking\"\n          >\n            <Plus className=\"mr-2 w-4 h-4\" />\n            New Booking\n          </Button>\n        </div>\n        \n        {/* Filters */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          {(dateFilter || phoneFilter || bookingDateFilter || repeatCountFilter || startDateFilter || endDateFilter) && (\n            <div className=\"col-span-full flex justify-between items-center\">\n              <Button\n                onClick={handlePrint}\n                className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2\"\n                data-testid=\"button-print-bookings\"\n              >\n                <Printer className=\"mr-2 w-4 h-4\" />\n                Print Bookings\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setDateFilter(\"\");\n                  setPhoneFilter(\"\");\n                  setBookingDateFilter(\"\");\n                  setRepeatCountFilter(\"\");\n                  setStartDateFilter(\"\");\n                  setEndDateFilter(\"\");\n                }}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                data-testid=\"button-clear-all-filters\"\n              >\n                Clear All Filters\n              </Button>\n            </div>\n          )}\n          <div className=\"relative\">\n            <Input\n              type=\"date\"\n              placeholder=\"Filter by date\"\n              className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n              value={dateFilter}\n              onChange={(e) => setDateFilter(e.target.value)}\n              data-testid=\"input-date-filter\"\n            />\n            {dateFilter && (\n              <button \n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                onClick={() => setDateFilter(\"\")}\n                data-testid=\"button-clear-date-filter\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n            <span className=\"text-xs text-gray-400 mt-1 block\">Filter by created date</span>\n          </div>\n          \n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Filter by phone number\"\n              className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n              value={phoneFilter}\n              onChange={(e) => setPhoneFilter(e.target.value)}\n              data-testid=\"input-phone-filter\"\n            />\n            {phoneFilter && (\n              <button \n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                onClick={() => setPhoneFilter(\"\")}\n                data-testid=\"button-clear-phone-filter\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n            <span className=\"text-xs text-gray-400 mt-1 block\">Filter by phone number</span>\n          </div>\n          \n          <div className=\"relative\">\n            <Input\n              type=\"date\"\n              placeholder=\"Filter by booking date\"\n              className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n              value={bookingDateFilter}\n              onChange={(e) => setBookingDateFilter(e.target.value)}\n              data-testid=\"input-booking-date-filter\"\n            />\n            {bookingDateFilter && (\n              <button \n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                onClick={() => setBookingDateFilter(\"\")}\n                data-testid=\"button-clear-booking-date-filter\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n            <span className=\"text-xs text-gray-400 mt-1 block\">Filter by booking date</span>\n          </div>\n          \n          <div className=\"relative\">\n            <Input\n              type=\"number\"\n              placeholder=\"Filter by repeat count\"\n              className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n              value={repeatCountFilter}\n              onChange={(e) => setRepeatCountFilter(e.target.value)}\n              data-testid=\"input-repeat-count-filter\"\n            />\n            {repeatCountFilter && (\n              <button \n                className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                onClick={() => setRepeatCountFilter(\"\")}\n                data-testid=\"button-clear-repeat-count-filter\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            )}\n            <span className=\"text-xs text-gray-400 mt-1 block\">Filter by repeat count</span>\n          </div>\n          \n          {/* Date range filters row */}\n          <div className=\"col-span-full grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"relative\">\n              <Input\n                type=\"date\"\n                placeholder=\"Start date\"\n                className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n                value={startDateFilter}\n                onChange={(e) => setStartDateFilter(e.target.value)}\n                data-testid=\"input-start-date-filter\"\n              />\n              {startDateFilter && (\n                <button \n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                  onClick={() => setStartDateFilter(\"\")}\n                  data-testid=\"button-clear-start-date-filter\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              )}\n              <span className=\"text-xs text-gray-400 mt-1 block\">Date range start</span>\n            </div>\n            \n            <div className=\"relative\">\n              <Input\n                type=\"date\"\n                placeholder=\"End date\"\n                className=\"bg-gray-800 border-gray-600 text-white pr-10\"\n                value={endDateFilter}\n                onChange={(e) => setEndDateFilter(e.target.value)}\n                data-testid=\"input-end-date-filter\"\n              />\n              {endDateFilter && (\n                <button \n                  className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                  onClick={() => setEndDateFilter(\"\")}\n                  data-testid=\"button-clear-end-date-filter\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              )}\n              <span className=\"text-xs text-gray-400 mt-1 block\">Date range end</span>\n            </div>\n          </div>\n        </div>\n\n        <Card className=\"bg-rosae-dark-gray border-gray-600\">\n          <CardContent className=\"p-6\">\n            {isBookingsLoading ? (\n              <div className=\"flex items-center justify-center h-64 text-gray-400\">\n                Loading bookings...\n              </div>\n            ) : currentBookings && currentBookings.length > 0 ? (\n              <div className=\"space-y-6\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"text-left text-gray-400 text-sm border-b border-gray-600\">\n                        <th className=\"pb-3\">Date</th>\n                        <th className=\"pb-3\">Customer Name</th>\n                        <th className=\"pb-3\">Theatre</th>\n                        <th className=\"pb-3\">Time Slot</th>\n                        <th className=\"pb-3\">Guests</th>\n                        <th className=\"pb-3\">Phone</th>\n                        <th className=\"pb-3\">18+</th>\n                        <th className=\"pb-3\">Visited</th>\n                        <th className=\"pb-3\">Repeat</th>\n                        <th className=\"pb-3\">Total Amount</th>\n                        <th className=\"pb-3\">Cash</th>\n                        <th className=\"pb-3\">UPI</th>\n                        <th className=\"pb-3\">Payment Status</th>\n                        <th className=\"pb-3\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"text-white\">\n                      {currentBookings.map((booking: any) => {\n                        const paymentStatus = getPaymentStatus(Number(booking.totalAmount));\n                        return (\n                        <tr key={booking.id} className=\"border-b border-gray-700 hover:bg-gray-800/30 transition-colors\" data-testid={`row-booking-${booking.id}`}>\n                          <td className=\"py-4\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"w-4 h-4 text-gray-400 mr-2\" />\n                              <span className=\"text-sm\">{formatDate(booking.bookingDate)}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 font-medium\">{booking.customerName || 'N/A'}</td>\n                          <td className=\"py-4 font-medium\">{booking.theatreName}</td>\n                          <td className=\"py-4 text-gray-300 text-sm\">{booking.timeSlot}</td>\n                          <td className=\"py-4\">\n                            <div className=\"flex items-center\">\n                              <Users className=\"w-4 h-4 text-gray-400 mr-2\" />\n                              <span className=\"font-medium\">{booking.guests}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <div className=\"flex items-center\">\n                              <Phone className=\"w-4 h-4 text-gray-400 mr-2\" />\n                              <span className=\"text-sm\">{booking.phoneNumber || 'N/A'}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <Badge className={booking.isEighteenPlus \n                              ? 'bg-green-600/20 text-green-400 border-green-600/30'\n                              : 'bg-red-600/20 text-red-400 border-red-600/30'\n                            }>\n                              {booking.isEighteenPlus ? 'Yes' : 'No'}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4\">\n                            <Badge className={booking.visited \n                              ? 'bg-green-600/20 text-green-400 border-green-600/30'\n                              : 'bg-yellow-600/20 text-yellow-400 border-yellow-600/30'\n                            }>\n                              {booking.visited ? 'Yes' : 'No'}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4\">\n                            <Badge className='bg-blue-600/20 text-blue-400 border-blue-600/30'>\n                              {booking.repeatCount || 0}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 font-semibold\">\n                            <div className=\"flex items-center\">\n                              <IndianRupee className=\"w-4 h-4 text-rosae-red mr-1\" />\n                              <span className=\"text-lg\">{formatCurrency(Number(booking.totalAmount))}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 text-green-400 font-medium\">{formatCurrency(Number(booking.cashAmount))}</td>\n                          <td className=\"py-4 text-purple-400 font-medium\">{formatCurrency(Number(booking.upiAmount))}</td>\n                          <td className=\"py-4\">\n                            <Badge className={paymentStatus === 'full'\n                              ? 'bg-green-600/20 text-green-400 border-green-600/30'\n                              : 'bg-yellow-600/20 text-yellow-400 border-yellow-600/30'\n                            }>\n                              {paymentStatus === 'full' ? 'Full Payment' : 'Partial Payment'}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEditBooking(booking)}\n                                className=\"border-blue-600/50 text-blue-400 hover:bg-blue-600/20\"\n                                data-testid={`button-edit-${booking.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDeleteBooking(booking)}\n                                className=\"border-red-600/50 text-red-400 hover:bg-red-600/20\"\n                                data-testid={`button-delete-${booking.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Pagination Controls */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between py-4\">\n                    <div className=\"text-sm text-gray-400\">\n                      Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, data?.pagination?.total || 0)} of {data?.pagination?.total || 0} bookings\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handlePageChange(currentPage - 1)}\n                        disabled={currentPage === 1}\n                        className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                        data-testid=\"button-prev-page\"\n                      >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                        Previous\n                      </Button>\n                      \n                      <div className=\"flex space-x-1\">\n                        {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (\n                          <Button\n                            key={pageNum}\n                            size=\"sm\"\n                            variant={pageNum === currentPage ? \"default\" : \"outline\"}\n                            onClick={() => handlePageChange(pageNum)}\n                            className={pageNum === currentPage \n                              ? \"bg-rosae-red hover:bg-rosae-dark-red\" \n                              : \"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                            }\n                            data-testid={`button-page-${pageNum}`}\n                          >\n                            {pageNum}\n                          </Button>\n                        ))}\n                      </div>\n                      \n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handlePageChange(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                        className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                        data-testid=\"button-next-page\"\n                      >\n                        Next\n                        <ChevronRight className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : data && data.bookings && Array.isArray(data.bookings) && data.bookings.length > 0 && currentBookings.length === 0 ? (\n              <div className=\"text-center py-16\">\n                <Search className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">No Matching Bookings</h3>\n                <p className=\"text-gray-400 mb-6\">Try adjusting your filters</p>\n                <Button \n                  onClick={() => {\n                    setDateFilter(\"\");\n                    setPhoneFilter(\"\");\n                    setBookingDateFilter(\"\");\n                  }}\n                  variant=\"outline\"\n                  className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear All Filters\n                </Button>\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">No Bookings Found</h3>\n                <p className=\"text-gray-400 mb-6\">Start by creating your first theatre booking</p>\n                <Button \n                  onClick={() => setIsBookingModalOpen(true)}\n                  className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                  data-testid=\"button-create-first-booking\"\n                >\n                  <Plus className=\"mr-2 w-4 h-4\" />\n                  Create First Booking\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <BookingModal \n          isOpen={isBookingModalOpen} \n          onClose={() => setIsBookingModalOpen(false)}\n          onSuccess={() => {\n            refetch();\n            setIsBookingModalOpen(false);\n          }}\n        />\n\n        {/* Edit Booking Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"bg-rosae-dark-gray border-gray-600 text-white max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Booking</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Update booking details for {editingBooking?.theatreName}\n              </DialogDescription>\n            </DialogHeader>\n            \n            {editingBooking && (\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Number of Guests</label>\n                  <Input\n                    type=\"number\"\n                    value={editingBooking.guests}\n                    onChange={(e) => setEditingBooking({\n                      ...editingBooking,\n                      guests: parseInt(e.target.value) || 1\n                    })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    data-testid=\"input-edit-guests\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Phone Number</label>\n                  <Input\n                    type=\"tel\"\n                    value={editingBooking.phoneNumber || ''}\n                    onChange={(e) => setEditingBooking({\n                      ...editingBooking,\n                      phoneNumber: e.target.value\n                    })}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    data-testid=\"input-edit-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">Cash Amount</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingBooking.cashAmount}\n                    onChange={(e) => {\n                      const cashAmount = parseFloat(e.target.value) || 0;\n                      const upiAmount = Math.max(0, editingBooking.totalAmount - cashAmount);\n                      setEditingBooking({\n                        ...editingBooking,\n                        cashAmount,\n                        upiAmount\n                      });\n                    }}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    data-testid=\"input-edit-cash\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-gray-300\">UPI Amount</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingBooking.upiAmount}\n                    onChange={(e) => {\n                      const upiAmount = parseFloat(e.target.value) || 0;\n                      const cashAmount = Math.max(0, editingBooking.totalAmount - upiAmount);\n                      setEditingBooking({\n                        ...editingBooking,\n                        upiAmount,\n                        cashAmount\n                      });\n                    }}\n                    className=\"bg-gray-800 border-gray-600 text-white mt-1\"\n                    data-testid=\"input-edit-upi\"\n                  />\n                </div>\n              </div>\n            )}\n            \n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsEditModalOpen(false)}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => editBookingMutation.mutate(editingBooking)}\n                disabled={editBookingMutation.isPending}\n                className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                data-testid=\"button-save-edit\"\n              >\n                {editBookingMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Booking Modal */}\n        <Dialog open={isDeleteModalOpen} onOpenChange={setIsDeleteModalOpen}>\n          <DialogContent className=\"bg-rosae-dark-gray border-gray-600 text-white max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Delete Booking</DialogTitle>\n              <DialogDescription className=\"text-gray-400\">\n                Are you sure you want to delete this booking? This action cannot be undone.\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-300\">Reason for deletion *</label>\n                <Select value={deleteReason} onValueChange={setDeleteReason}>\n                  <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white mt-1\" data-testid=\"select-delete-reason\">\n                    <SelectValue placeholder=\"Select a reason\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    <SelectItem value=\"Cancellation\">Cancellation</SelectItem>\n                    <SelectItem value=\"Reschedule\">Reschedule</SelectItem>\n                    <SelectItem value=\"By mistake\">By mistake</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium text-gray-300\">Additional comments (optional)</label>\n                <Textarea\n                  value={deleteComment}\n                  onChange={(e) => setDeleteComment(e.target.value)}\n                  placeholder=\"Add any additional details...\"\n                  className=\"bg-gray-800 border-gray-600 text-white mt-1 resize-none\"\n                  rows={3}\n                  data-testid=\"textarea-delete-comment\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDeleteModalOpen(false);\n                  setDeleteReason('');\n                  setDeleteComment('');\n                }}\n                className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                data-testid=\"button-cancel-delete\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => deleteBookingMutation.mutate({ \n                  bookingId: deletingBooking.id, \n                  reason: deleteReason, \n                  comment: deleteComment \n                })}\n                disabled={!deleteReason || deleteBookingMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {deleteBookingMutation.isPending ? 'Deleting...' : 'Delete Booking'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":36737},"client/src/pages/configuration.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Configuration() {\n  const { toast } = useToast();\n  const [generalSettings, setGeneralSettings] = useState({\n    theaterName: 'ROSAE Theatre',\n    contactEmail: 'contact@rosaetheatre.com',\n    phoneNumber: '+1 (555) 123-4567',\n    address: '123 Broadway Ave, New York, NY 10001',\n    enableNotifications: true,\n  });\n\n  const [bookingSettings, setBookingSettings] = useState({\n    advanceBookingDays: 30,\n    maxTicketsPerBooking: 10,\n    enableOnlineBooking: true,\n    showSeatMap: true,\n  });\n\n  const handleGeneralSettingsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setGeneralSettings({\n      ...generalSettings,\n      [name]: type === 'checkbox' ? checked : value,\n    });\n  };\n\n  const handleBookingSettingsChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setBookingSettings({\n      ...bookingSettings,\n      [name]: type === 'checkbox' ? checked : type === 'number' ? parseInt(value) : value,\n    });\n  };\n\n  const handleSaveSettings = () => {\n    // Here you would typically save settings to your backend\n    toast({\n      title: 'Settings saved',\n      description: 'Your configuration has been updated successfully.',\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <h1 className=\"text-3xl font-bold mb-6\">System Configuration</h1>\n      \n      <Tabs defaultValue=\"general\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"general\">General Settings</TabsTrigger>\n          <TabsTrigger value=\"booking\">Booking Settings</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"general\">\n          <Card>\n            <CardHeader>\n              <CardTitle>General Settings</CardTitle>\n              <CardDescription>\n                Configure your theatre's basic information and general settings.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"theaterName\">Theatre Name</Label>\n                <Input\n                  id=\"theaterName\"\n                  name=\"theaterName\"\n                  value={generalSettings.theaterName}\n                  onChange={handleGeneralSettingsChange}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"contactEmail\">Contact Email</Label>\n                <Input\n                  id=\"contactEmail\"\n                  name=\"contactEmail\"\n                  type=\"email\"\n                  value={generalSettings.contactEmail}\n                  onChange={handleGeneralSettingsChange}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  name=\"phoneNumber\"\n                  value={generalSettings.phoneNumber}\n                  onChange={handleGeneralSettingsChange}\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Input\n                  id=\"address\"\n                  name=\"address\"\n                  value={generalSettings.address}\n                  onChange={handleGeneralSettingsChange}\n                />\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"enableNotifications\">Enable Notifications</Label>\n                  <p className=\"text-sm text-muted-foreground\">Send email notifications for bookings and updates</p>\n                </div>\n                <Switch\n                  id=\"enableNotifications\"\n                  name=\"enableNotifications\"\n                  checked={generalSettings.enableNotifications}\n                  onCheckedChange={(checked) => \n                    setGeneralSettings({...generalSettings, enableNotifications: checked})\n                  }\n                />\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button onClick={handleSaveSettings}>Save Changes</Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"booking\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Booking Settings</CardTitle>\n              <CardDescription>\n                Configure how customers can book tickets for your shows.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"advanceBookingDays\">Advance Booking Days</Label>\n                <Input\n                  id=\"advanceBookingDays\"\n                  name=\"advanceBookingDays\"\n                  type=\"number\"\n                  value={bookingSettings.advanceBookingDays}\n                  onChange={handleBookingSettingsChange}\n                />\n                <p className=\"text-sm text-muted-foreground\">How many days in advance can customers book tickets</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"maxTicketsPerBooking\">Maximum Tickets Per Booking</Label>\n                <Input\n                  id=\"maxTicketsPerBooking\"\n                  name=\"maxTicketsPerBooking\"\n                  type=\"number\"\n                  value={bookingSettings.maxTicketsPerBooking}\n                  onChange={handleBookingSettingsChange}\n                />\n              </div>\n              \n              <Separator className=\"my-4\" />\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"enableOnlineBooking\">Enable Online Booking</Label>\n                  <p className=\"text-sm text-muted-foreground\">Allow customers to book tickets online</p>\n                </div>\n                <Switch\n                  id=\"enableOnlineBooking\"\n                  name=\"enableOnlineBooking\"\n                  checked={bookingSettings.enableOnlineBooking}\n                  onCheckedChange={(checked) => \n                    setBookingSettings({...bookingSettings, enableOnlineBooking: checked})\n                  }\n                />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label htmlFor=\"showSeatMap\">Show Seat Map</Label>\n                  <p className=\"text-sm text-muted-foreground\">Display interactive seat map during booking</p>\n                </div>\n                <Switch\n                  id=\"showSeatMap\"\n                  name=\"showSeatMap\"\n                  checked={bookingSettings.showSeatMap}\n                  onCheckedChange={(checked) => \n                    setBookingSettings({...bookingSettings, showSeatMap: checked})\n                  }\n                />\n              </div>\n            </CardContent>\n            <CardFooter>\n              <Button onClick={handleSaveSettings}>Save Changes</Button>\n            </CardFooter>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":8059},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BookingModal } from \"@/components/booking-modal\";\nimport { useState } from \"react\";\nimport { \n  IndianRupee, \n  Ticket, \n  Banknote, \n  CreditCard,\n  TrendingUp,\n  ArrowUp\n} from \"lucide-react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: dailyRevenue, isLoading: isDailyRevenueLoading, error: dailyRevenueError } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/daily-revenue\"],\n  });\n\n  const { data: paymentMethods, isLoading: isPaymentMethodsLoading, error: paymentMethodsError } = useQuery<any>({\n    queryKey: [\"/api/analytics/payment-methods\"],\n  });\n\n  const { data: timeSlots, isLoading: isTimeSlotsLoading, error: timeSlotsError } = useQuery<any[]>({\n    queryKey: [\"/api/analytics/time-slots\"],\n  });\n\n  const { data: recentBookings, isLoading: isRecentBookingsLoading, error: recentBookingsError } = useQuery<any[]>({\n    queryKey: [\"/api/bookings\", \"20\"],\n  });\n\n  // Handle errors\n  useEffect(() => {\n    const errors = [dailyRevenueError, paymentMethodsError, timeSlotsError, recentBookingsError];\n    errors.forEach(error => {\n      if (error && isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n      }\n    });\n  }, [dailyRevenueError, paymentMethodsError, timeSlotsError, recentBookingsError, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Calculate today's stats\n  const todayRevenue = dailyRevenue?.[0]?.revenue || 0;\n  const todayBookings = dailyRevenue?.[0]?.bookings || 0;\n  const yesterdayRevenue = dailyRevenue?.[1]?.revenue || 0;\n  const revenueChange = yesterdayRevenue > 0 ? ((todayRevenue - yesterdayRevenue) / yesterdayRevenue) * 100 : 0;\n\n  const cashAmount = paymentMethods?.cash || 0;\n  const upiAmount = paymentMethods?.upi || 0;\n  const totalPayments = cashAmount + upiAmount;\n  const cashPercentage = totalPayments > 0 ? (cashAmount / totalPayments) * 100 : 0;\n  const upiPercentage = totalPayments > 0 ? (upiAmount / totalPayments) * 100 : 0;\n\n  const pieData = [\n    { name: 'Cash', value: cashPercentage, amount: cashAmount },\n    { name: 'UPI', value: upiPercentage, amount: upiAmount },\n  ];\n\n  const COLORS = ['#10B981', '#8B5CF6'];\n\n  const formatCurrency = (value: number) => {\n    return `₹${value.toLocaleString('en-IN')}`;\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">Dashboard Overview</h2>\n            <p className=\"text-gray-400\">Welcome back, manage your theatre operations</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              onClick={() => setIsBookingModalOpen(true)}\n              className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2\"\n              data-testid=\"button-quick-booking\"\n            >\n              <Ticket className=\"mr-2 w-4 h-4\" />\n              Quick Booking\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Today's Revenue</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-today-revenue\">\n                    {formatCurrency(todayRevenue)}\n                  </p>\n                  <p className=\"text-green-400 text-sm mt-1\">\n                    <ArrowUp className=\"inline w-3 h-3 mr-1\" />\n                    +{revenueChange.toFixed(1)}% from yesterday\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-rosae-red/20 rounded-lg flex items-center justify-center\">\n                  <IndianRupee className=\"text-rosae-red text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Total Bookings</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-total-bookings\">\n                    {todayBookings}\n                  </p>\n                  <p className=\"text-green-400 text-sm mt-1\">\n                    <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n                    Today's count\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <Ticket className=\"text-blue-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Cash Payments</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-cash-payments\">\n                    {formatCurrency(cashAmount)}\n                  </p>\n                  <p className=\"text-gray-400 text-sm mt-1\">{cashPercentage.toFixed(1)}% of total</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <Banknote className=\"text-green-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">UPI Payments</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-upi-payments\">\n                    {formatCurrency(upiAmount)}\n                  </p>\n                  <p className=\"text-gray-400 text-sm mt-1\">{upiPercentage.toFixed(1)}% of total</p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-500/20 rounded-lg flex items-center justify-center\">\n                  <CreditCard className=\"text-purple-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          {/* Daily Revenue Chart */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-xl font-semibold text-white\" data-testid=\"text-daily-revenue-title\">Daily Revenue</h3>\n              </div>\n              <div className=\"h-64\">\n                {isDailyRevenueLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={dailyRevenue}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                      <XAxis dataKey=\"date\" stroke=\"#9CA3AF\" />\n                      <YAxis stroke=\"#9CA3AF\" tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`} />\n                      <Tooltip formatter={(value: number) => [formatCurrency(value), 'Revenue']} />\n                      <Bar dataKey=\"revenue\" fill=\"#DC2626\" radius={[4, 4, 0, 0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Methods Pie Chart */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-payment-methods-title\">Payment Methods</h3>\n              <div className=\"h-64\">\n                {isPaymentMethodsLoading ? (\n                  <div className=\"flex items-center justify-center h-full text-gray-400\">Loading...</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={pieData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        innerRadius={40}\n                        dataKey=\"value\"\n                      >\n                        {pieData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: number, name) => [`${value.toFixed(1)}%`, name]} />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Bookings & Time Slot Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Bookings */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"bg-rosae-dark-gray border-gray-600\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-white\" data-testid=\"text-recent-bookings-title\">Recent Bookings</h3>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"text-rosae-red hover:text-rosae-dark-red\"\n                    onClick={() => window.location.href = \"/bookings\"}\n                    data-testid=\"button-view-all-bookings\"\n                  >\n                    View All\n                  </Button>\n                </div>\n                <div className=\"overflow-x-auto\">\n                  {isRecentBookingsLoading ? (\n                    <div className=\"flex items-center justify-center h-32 text-gray-400\">Loading...</div>\n                  ) : recentBookings && recentBookings.length > 0 ? (\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"text-left text-gray-400 text-sm border-b border-gray-600\">\n                          <th className=\"pb-3\">Theatre</th>\n                          <th className=\"pb-3\">Time</th>\n                          <th className=\"pb-3\">Guests</th>\n                          <th className=\"pb-3\">Amount</th>\n                          <th className=\"pb-3\">Payment</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"text-white\">\n                        {recentBookings.slice(0, 5).map((booking: any) => (\n                          <tr key={booking.id} className=\"border-b border-gray-700\" data-testid={`row-booking-${booking.id}`}>\n                            <td className=\"py-3\">{booking.theatreName}</td>\n                            <td className=\"py-3 text-gray-300\">{booking.timeSlot}</td>\n                            <td className=\"py-3\">{booking.guests}</td>\n                            <td className=\"py-3 font-medium\">{formatCurrency(Number(booking.totalAmount))}</td>\n                            <td className=\"py-3\">\n                              <span className=\"px-2 py-1 bg-green-600/20 text-green-400 rounded-full text-xs\">\n                                {Number(booking.cashAmount) > 0 && Number(booking.upiAmount) > 0 ? 'Mixed' : \n                                 Number(booking.cashAmount) > 0 ? 'Cash' : 'UPI'}\n                              </span>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-400\">No bookings found</div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Time Slot Performance */}\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-time-slot-performance-title\">Time Slot Performance</h3>\n              <div className=\"space-y-4\">\n                {isTimeSlotsLoading ? (\n                  <div className=\"flex items-center justify-center h-32 text-gray-400\">Loading...</div>\n                ) : timeSlots && timeSlots.length > 0 ? (\n                  timeSlots.map((slot: any) => {\n                    const maxRevenue = Math.max(...timeSlots.map((s: any) => s.revenue));\n                    const occupancyPercentage = maxRevenue > 0 ? (slot.revenue / maxRevenue) * 100 : 0;\n                    \n                    return (\n                      <div key={slot.timeSlot} className=\"flex items-center justify-between p-3 bg-gray-800 rounded-lg\" data-testid={`card-slot-${slot.timeSlot}`}>\n                        <div>\n                          <p className=\"text-white font-medium\">{slot.timeSlot}</p>\n                          <p className=\"text-gray-400 text-sm\">{slot.bookings} bookings</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-white font-medium\">{formatCurrency(slot.revenue)}</p>\n                          <div className=\"w-16 bg-gray-700 rounded-full h-2 mt-1\">\n                            <div \n                              className=\"bg-rosae-red h-2 rounded-full\" \n                              style={{ width: `${occupancyPercentage}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"text-center py-8 text-gray-400\">No time slot data available</div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <BookingModal \n          isOpen={isBookingModalOpen} \n          onClose={() => setIsBookingModalOpen(false)} \n        />\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":16069},"client/src/pages/expenses.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, IndianRupee, Calendar, Tag, Download, Printer } from \"lucide-react\";\nimport { insertExpenseSchema } from \"@shared/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst EXPENSE_CATEGORIES = [\n  \"Utilities\",\n  \"Maintenance\", \n  \"Staff Salaries\",\n  \"Equipment\",\n  \"Marketing\",\n  \"Rent\",\n  \"Supplies\",\n  \"Insurance\",\n  \"Other\"\n];\n\nexport default function Expenses() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [isExpenseModalOpen, setIsExpenseModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const form = useForm({\n    resolver: zodResolver(insertExpenseSchema),\n    defaultValues: {\n      category: \"\",\n      description: \"\",\n      amount: \"\",\n      expenseDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const { data: expenses, isLoading: isExpensesLoading } = useQuery<any[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/expenses\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Expense created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      setIsExpenseModalOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create expense\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  const handleExport = async (category?: string) => {\n    try {\n      const params = category ? `?category=${category}` : '';\n      const response = await fetch(`/api/expenses/export${params}`, {\n        credentials: 'include'\n      });\n      \n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `expenses${category ? `_${category}` : ''}.csv`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        toast({\n          title: \"Success\",\n          description: \"Expenses exported successfully\",\n        });\n      } else {\n        throw new Error('Export failed');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to export expenses\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const formatCurrency = (value: number) => {\n    return `₹${value.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  // Calculate total expenses\n  const totalExpenses = expenses?.reduce((sum: number, expense: any) => sum + Number(expense.amount), 0) || 0;\n\n  // Group expenses by category\n  const expensesByCategory = expenses?.reduce((acc: any, expense: any) => {\n    const category = expense.category;\n    if (!acc[category]) {\n      acc[category] = 0;\n    }\n    acc[category] += Number(expense.amount);\n    return acc;\n  }, {}) || {};\n\n  return (\n    <div className=\"flex min-h-screen bg-rosae-black\">\n      <Sidebar />\n      <div className=\"flex-1\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">Expense Management</h2>\n            <p className=\"text-gray-400\">Track and manage all business expenses</p>\n          </div>\n          <Dialog open={isExpenseModalOpen} onOpenChange={setIsExpenseModalOpen}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2\"\n                data-testid=\"button-new-expense\"\n              >\n                <Plus className=\"mr-2 w-4 h-4\" />\n                New Expense\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-rosae-dark-gray border-gray-600 text-white\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold text-white\">Add New Expense</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\" data-testid=\"select-category\">\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent className=\"bg-gray-800 border-gray-600\">\n                              {EXPENSE_CATEGORIES.map((category) => (\n                                <SelectItem key={category} value={category}>\n                                  {category}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Amount</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"1000\"\n                              className=\"bg-gray-800 border-gray-600 text-white\"\n                              data-testid=\"input-amount\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"expenseDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Expense Date</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"date\"\n                            className=\"bg-gray-800 border-gray-600 text-white\"\n                            data-testid=\"input-expense-date\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Describe the expense...\"\n                            className=\"bg-gray-800 border-gray-600 text-white resize-none\"\n                            rows={3}\n                            data-testid=\"textarea-description\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsExpenseModalOpen(false)}\n                      className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      data-testid=\"button-cancel-expense\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createExpenseMutation.isPending}\n                      className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                      data-testid=\"button-save-expense\"\n                    >\n                      {createExpenseMutation.isPending ? \"Saving...\" : \"Save Expense\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Total Expenses</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-total-expenses\">\n                    {formatCurrency(totalExpenses)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-rosae-red/20 rounded-lg flex items-center justify-center\">\n                  <IndianRupee className=\"text-rosae-red text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Categories</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-categories-count\">\n                    {Object.keys(expensesByCategory).length}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center\">\n                  <Tag className=\"text-blue-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-gray-400 text-sm\">Total Entries</p>\n                  <p className=\"text-3xl font-bold text-white\" data-testid=\"text-total-entries\">\n                    {expenses?.length || 0}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-500/20 rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"text-green-400 text-xl\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Expenses List */}\n        <Card className=\"bg-rosae-dark-gray border-gray-600\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-expenses-list-title\">All Expenses</h3>\n            {isExpensesLoading ? (\n              <div className=\"flex items-center justify-center h-64 text-gray-400\">\n                Loading expenses...\n              </div>\n            ) : expenses && expenses.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"text-left text-gray-400 text-sm border-b border-gray-600\">\n                      <th className=\"pb-3\">Date</th>\n                      <th className=\"pb-3\">Category</th>\n                      <th className=\"pb-3\">Description</th>\n                      <th className=\"pb-3\">Amount</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"text-white\">\n                    {expenses.map((expense: any) => (\n                      <tr key={expense.id} className=\"border-b border-gray-700 hover:bg-gray-800/50\" data-testid={`row-expense-${expense.id}`}>\n                        <td className=\"py-4\">\n                          <div className=\"flex items-center\">\n                            <Calendar className=\"w-4 h-4 text-gray-400 mr-2\" />\n                            {formatDate(expense.expenseDate)}\n                          </div>\n                        </td>\n                        <td className=\"py-4\">\n                          <span className=\"px-3 py-1 bg-blue-600/20 text-blue-400 rounded-full text-xs font-medium\">\n                            {expense.category}\n                          </span>\n                        </td>\n                        <td className=\"py-4 text-gray-300 max-w-xs truncate\">{expense.description}</td>\n                        <td className=\"py-4 font-semibold\">\n                          <div className=\"flex items-center text-rosae-red\">\n                            <IndianRupee className=\"w-4 h-4 mr-1\" />\n                            {formatCurrency(Number(expense.amount))}\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <IndianRupee className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">No Expenses Found</h3>\n                <p className=\"text-gray-400 mb-6\">Start by recording your first expense</p>\n                <Button \n                  onClick={() => setIsExpenseModalOpen(true)}\n                  className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                  data-testid=\"button-create-first-expense\"\n                >\n                  <Plus className=\"mr-2 w-4 h-4\" />\n                  Add First Expense\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16638},"client/src/pages/landing.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Theater, BarChart3, Users, Calendar } from \"lucide-react\";\n\nexport default function Landing() {\n  const { isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-rosae-black text-white\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"text-center mb-16\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-rosae-red rounded-2xl flex items-center justify-center mr-4\">\n              <Theater className=\"text-white text-2xl\" />\n            </div>\n            <div>\n              <h1 className=\"text-5xl font-bold text-white\">ROSAE</h1>\n              <p className=\"text-gray-400 text-lg\">Theatre Management System</p>\n            </div>\n          </div>\n          <h2 className=\"text-3xl font-semibold mb-4\">\n            Streamline Your Theatre Operations\n          </h2>\n          <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n            Comprehensive theatre rental business management with detailed booking entry, \n            financial tracking, analytics, and employee management features.\n          </p>\n          <Button \n            onClick={() => window.location.href = \"/api/login\"}\n            className=\"bg-rosae-red hover:bg-rosae-dark-red px-8 py-3 text-lg\"\n            data-testid=\"button-login\"\n          >\n            Sign In to Continue\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6 text-center\">\n              <BarChart3 className=\"w-12 h-12 text-rosae-red mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Analytics</h3>\n              <p className=\"text-gray-400\">\n                Comprehensive data visualization with multiple chart types and financial insights.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6 text-center\">\n              <Theater className=\"w-12 h-12 text-rosae-red mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Bookings</h3>\n              <p className=\"text-gray-400\">\n                Easy booking entry with comprehensive form validation and payment tracking.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6 text-center\">\n              <Users className=\"w-12 h-12 text-rosae-red mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Team Management</h3>\n              <p className=\"text-gray-400\">\n                User management with role-based access and activity logging.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6 text-center\">\n              <Calendar className=\"w-12 h-12 text-rosae-red mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Leave Management</h3>\n              <p className=\"text-gray-400\">\n                Complete leave application system with calendar interface and approvals.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center\">\n          <p className=\"text-gray-400 mb-4\">\n            Trusted by theatre businesses for comprehensive operational management\n          </p>\n          <div className=\"flex items-center justify-center space-x-8 text-sm text-gray-500\">\n            <span>✓ Real-time Analytics</span>\n            <span>✓ Financial Tracking</span>\n            <span>✓ Multi-user Support</span>\n            <span>✓ Mobile Responsive</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4311},"client/src/pages/leave-management.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Calendar, User, CheckCircle, XCircle, Clock } from \"lucide-react\";\nimport { insertLeaveApplicationSchema } from \"@shared/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nexport default function LeaveManagement() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [isLeaveModalOpen, setIsLeaveModalOpen] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const form = useForm({\n    resolver: zodResolver(insertLeaveApplicationSchema),\n    defaultValues: {\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n    },\n  });\n\n  const { data: leaveApplications, isLoading: isLeaveLoading, error: leaveError } = useQuery<any[]>({\n    queryKey: [\"/api/leave-applications\"],\n  });\n\n  // Handle leave applications error\n  useEffect(() => {\n    if (leaveError && isUnauthorizedError(leaveError)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [leaveError, toast]);\n\n  const createLeaveMutation = useMutation({\n    mutationFn: async (data: any) => {\n      await apiRequest(\"POST\", \"/api/leave-applications\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Leave application submitted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-applications\"] });\n      setIsLeaveModalOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit leave application\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateLeaveStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      await apiRequest(\"PATCH\", `/api/leave-applications/${id}/status`, { status });\n    },\n    onSuccess: (_, { status }) => {\n      toast({\n        title: \"Success\",\n        description: `Leave application ${status} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-applications\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update leave status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    createLeaveMutation.mutate(data);\n  };\n\n  const handleStatusUpdate = (id: string, status: string) => {\n    updateLeaveStatusMutation.mutate({ id, status });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-600/20 text-green-400';\n      case 'rejected':\n        return 'bg-red-600/20 text-red-400';\n      default:\n        return 'bg-yellow-600/20 text-yellow-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'rejected':\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const isAdmin = user?.role === 'admin';\n  const pendingApplications = leaveApplications?.filter((app: any) => app.status === 'pending') || [];\n  const myApplications = leaveApplications?.filter((app: any) => app.userId === user?.id) || [];\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\" data-testid=\"text-page-title\">Leave Management</h2>\n            <p className=\"text-gray-400\">Manage leave applications and approvals</p>\n          </div>\n          <Dialog open={isLeaveModalOpen} onOpenChange={setIsLeaveModalOpen}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"bg-rosae-red hover:bg-rosae-dark-red px-6 py-2\"\n                data-testid=\"button-apply-leave\"\n              >\n                <Plus className=\"mr-2 w-4 h-4\" />\n                Apply for Leave\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-rosae-dark-gray border-gray-600 text-white\">\n              <DialogHeader>\n                <DialogTitle className=\"text-xl font-bold text-white\">Apply for Leave</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"startDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">Start Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              className=\"bg-gray-800 border-gray-600 text-white\"\n                              data-testid=\"input-start-date\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"endDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-300\">End Date</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"date\"\n                              className=\"bg-gray-800 border-gray-600 text-white\"\n                              data-testid=\"input-end-date\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"reason\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-300\">Reason</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Please provide a reason for your leave...\"\n                            className=\"bg-gray-800 border-gray-600 text-white resize-none\"\n                            rows={4}\n                            data-testid=\"textarea-reason\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex justify-end space-x-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsLeaveModalOpen(false)}\n                      className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                      data-testid=\"button-cancel-leave\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createLeaveMutation.isPending}\n                      className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                      data-testid=\"button-submit-leave\"\n                    >\n                      {createLeaveMutation.isPending ? \"Submitting...\" : \"Submit Application\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Admin Section - Pending Approvals */}\n        {isAdmin && (\n          <Card className=\"bg-rosae-dark-gray border-gray-600 mb-8\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6 flex items-center\" data-testid=\"text-pending-approvals-title\">\n                <Clock className=\"w-5 h-5 mr-2 text-yellow-400\" />\n                Pending Approvals ({pendingApplications.length})\n              </h3>\n              {isLeaveLoading ? (\n                <div className=\"flex items-center justify-center h-32 text-gray-400\">Loading...</div>\n              ) : pendingApplications.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {pendingApplications.map((application: any) => (\n                    <div key={application.id} className=\"bg-gray-800 rounded-lg p-4 border border-gray-700\" data-testid={`card-pending-${application.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center mb-2\">\n                            <User className=\"w-4 h-4 text-gray-400 mr-2\" />\n                            <span className=\"font-medium text-white\">Employee ID: {application.userId}</span>\n                          </div>\n                          <div className=\"flex items-center mb-2\">\n                            <Calendar className=\"w-4 h-4 text-gray-400 mr-2\" />\n                            <span className=\"text-gray-300\">\n                              {formatDate(application.startDate)} - {formatDate(application.endDate)}\n                            </span>\n                          </div>\n                          <p className=\"text-gray-400 text-sm\">{application.reason}</p>\n                        </div>\n                        <div className=\"flex space-x-2 ml-4\">\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleStatusUpdate(application.id, 'approved')}\n                            disabled={updateLeaveStatusMutation.isPending}\n                            className=\"bg-green-600 hover:bg-green-700 text-white\"\n                            data-testid={`button-approve-${application.id}`}\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleStatusUpdate(application.id, 'rejected')}\n                            disabled={updateLeaveStatusMutation.isPending}\n                            className=\"border-red-600 text-red-400 hover:bg-red-600/10\"\n                            data-testid={`button-reject-${application.id}`}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-400\">No pending applications</div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* My Applications */}\n        <Card className=\"bg-rosae-dark-gray border-gray-600 mb-8\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-my-applications-title\">My Leave Applications</h3>\n            {isLeaveLoading ? (\n              <div className=\"flex items-center justify-center h-32 text-gray-400\">Loading...</div>\n            ) : myApplications.length > 0 ? (\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"text-left text-gray-400 text-sm border-b border-gray-600\">\n                      <th className=\"pb-3\">Start Date</th>\n                      <th className=\"pb-3\">End Date</th>\n                      <th className=\"pb-3\">Reason</th>\n                      <th className=\"pb-3\">Status</th>\n                      <th className=\"pb-3\">Applied On</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"text-white\">\n                    {myApplications.map((application: any) => (\n                      <tr key={application.id} className=\"border-b border-gray-700\" data-testid={`row-application-${application.id}`}>\n                        <td className=\"py-4\">{formatDate(application.startDate)}</td>\n                        <td className=\"py-4\">{formatDate(application.endDate)}</td>\n                        <td className=\"py-4 text-gray-300 max-w-xs truncate\">{application.reason}</td>\n                        <td className=\"py-4\">\n                          <Badge className={`${getStatusColor(application.status)} flex items-center w-fit`}>\n                            {getStatusIcon(application.status)}\n                            <span className=\"ml-1 capitalize\">{application.status}</span>\n                          </Badge>\n                        </td>\n                        <td className=\"py-4 text-gray-400\">{formatDate(application.createdAt)}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            ) : (\n              <div className=\"text-center py-16\">\n                <Calendar className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">No Leave Applications</h3>\n                <p className=\"text-gray-400 mb-6\">You haven't applied for any leave yet</p>\n                <Button \n                  onClick={() => setIsLeaveModalOpen(true)}\n                  className=\"bg-rosae-red hover:bg-rosae-dark-red\"\n                  data-testid=\"button-apply-first-leave\"\n                >\n                  <Plus className=\"mr-2 w-4 h-4\" />\n                  Apply for Leave\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* All Applications (Admin View) */}\n        {isAdmin && (\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold text-white mb-6\" data-testid=\"text-all-applications-title\">All Leave Applications</h3>\n              {isLeaveLoading ? (\n                <div className=\"flex items-center justify-center h-32 text-gray-400\">Loading...</div>\n              ) : leaveApplications && leaveApplications.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"text-left text-gray-400 text-sm border-b border-gray-600\">\n                        <th className=\"pb-3\">Employee</th>\n                        <th className=\"pb-3\">Start Date</th>\n                        <th className=\"pb-3\">End Date</th>\n                        <th className=\"pb-3\">Reason</th>\n                        <th className=\"pb-3\">Status</th>\n                        <th className=\"pb-3\">Applied On</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"text-white\">\n                      {leaveApplications.map((application: any) => (\n                        <tr key={application.id} className=\"border-b border-gray-700\" data-testid={`row-all-application-${application.id}`}>\n                          <td className=\"py-4 font-medium\">{application.userId}</td>\n                          <td className=\"py-4\">{formatDate(application.startDate)}</td>\n                          <td className=\"py-4\">{formatDate(application.endDate)}</td>\n                          <td className=\"py-4 text-gray-300 max-w-xs truncate\">{application.reason}</td>\n                          <td className=\"py-4\">\n                            <Badge className={`${getStatusColor(application.status)} flex items-center w-fit`}>\n                              {getStatusIcon(application.status)}\n                              <span className=\"ml-1 capitalize\">{application.status}</span>\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 text-gray-400\">{formatDate(application.createdAt)}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-400\">No leave applications found</div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":19122},"client/src/pages/login.tsx":{"content":"import React, { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient } from '@/lib/queryClient';\nimport { Eye, EyeOff } from 'lucide-react';\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const user = await response.json();\n        toast({\n          title: \"Login successful\",\n          description: `Welcome back, ${user.firstName}!`,\n        });\n        \n        // Invalidate the auth query to force a refresh\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/status\"] });\n        \n        // Small delay to ensure the query is invalidated before redirecting\n        setTimeout(() => {\n          setLocation('/');\n        }, 100);\n      } else {\n        const errorData = await response.json();\n        setError(errorData.message || 'Login failed');\n      }\n    } catch (err) {\n      setError('Network error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n         <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 p-4 relative overflow-hidden\">\n       {/* Background decorative elements */}\n       <div className=\"absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,white,rgba(255,255,255,0.6))] -z-10\" />\n       <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-br from-red-50/30 via-transparent to-blue-50/30\" />\n       \n       {/* Metallic ring background elements */}\n       <div className=\"absolute top-10 left-10 w-24 h-24 border-2 border-gray-300/20 rounded-full animate-spin-slow\" />\n       <div className=\"absolute top-32 right-16 w-16 h-16 border border-gray-400/30 rounded-full animate-pulse\" />\n       <div className=\"absolute bottom-16 left-32 w-20 h-20 border-2 border-red-300/40 rounded-full animate-spin-slow-reverse\" />\n       \n       {/* Floating elements */}\n       <div className=\"absolute top-20 left-20 w-32 h-32 bg-red-100 rounded-full blur-3xl opacity-30 animate-pulse\" />\n       <div className=\"absolute bottom-20 right-20 w-40 h-40 bg-blue-100 rounded-full blur-3xl opacity-30 animate-pulse delay-1000\" />\n       \n       {/* Additional decorative rings */}\n       <div className=\"absolute top-1/4 right-1/4 w-12 h-12 border border-gray-200/50 rounded-full animate-bounce\" />\n       <div className=\"absolute bottom-1/3 left-1/6 w-8 h-8 bg-gradient-to-br from-red-200 to-red-300 rounded-full opacity-60 animate-pulse delay-500\" />\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        <Card className=\"backdrop-blur-sm bg-white/80 border-0 shadow-2xl\">\n          <CardHeader className=\"text-center pb-8\">\n                         {/* Brand Logo */}\n             <div className=\"flex justify-center mb-6\">\n               <div className=\"relative\">\n                 {/* Metallic ring */}\n                 <div className=\"w-20 h-20 border-4 border-gray-300 rounded-full flex items-center justify-center shadow-lg bg-gradient-to-br from-gray-100 to-gray-200\">\n                   {/* Inner ring */}\n                   <div className=\"w-16 h-16 border-2 border-gray-400 rounded-full flex items-center justify-center bg-white\">\n                     {/* Red \"r\" */}\n                     <span className=\"text-red-500 text-2xl font-bold tracking-tight\">r</span>\n                   </div>\n                 </div>\n                 {/* Subtle shadow */}\n                 <div className=\"absolute inset-0 w-20 h-20 rounded-full bg-black/5 blur-sm -z-10\" />\n               </div>\n             </div>\n            \n            <CardTitle className=\"text-3xl font-bold text-gray-900 mb-2\">\n              Welcome to ROSAE\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-base\">\n              Theatre Management System\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            <form onSubmit={handleLogin} className=\"space-y-5\">\n              {error && (\n                <Alert variant=\"destructive\" className=\"border-red-200 bg-red-50\">\n                  <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n                </Alert>\n              )}\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                  Email Address\n                </Label>\n                                 <div className=\"relative\">\n                   <Input\n                     id=\"email\"\n                     type=\"email\"\n                     placeholder=\"Enter your email\"\n                     value={email}\n                     onChange={(e) => setEmail(e.target.value)}\n                     required\n                     disabled={isLoading}\n                     className=\"h-12 pr-12 border-gray-200 focus:border-red-500 focus:ring-red-500/20 transition-colors\"\n                   />\n                   <div className=\"absolute inset-y-0 right-0 pr-4 flex items-center pointer-events-none\">\n                     <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                       <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207\" />\n                     </svg>\n                   </div>\n                 </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                  Password\n                </Label>\n                                 <div className=\"relative\">\n                   <Input\n                     id=\"password\"\n                     type={showPassword ? \"text\" : \"password\"}\n                     placeholder=\"Enter your password\"\n                     value={password}\n                     onChange={(e) => setPassword(e.target.value)}\n                     required\n                     disabled={isLoading}\n                     className=\"h-12 pr-12 border-gray-200 focus:border-red-500 focus:ring-red-500/20 transition-colors\"\n                   />\n                   <button\n                     type=\"button\"\n                     className=\"absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-600 transition-colors\"\n                     onClick={() => setShowPassword(!showPassword)}\n                   >\n                     {showPassword ? (\n                       <EyeOff className=\"h-5 w-5\" />\n                     ) : (\n                       <Eye className=\"h-5 w-5\" />\n                     )}\n                   </button>\n                 </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full h-12 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-medium text-base shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-[1.02]\" \n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                    <span>Logging in...</span>\n                  </div>\n                ) : (\n                  <span>Log in</span>\n                )}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <div className=\"w-full h-px bg-gradient-to-r from-transparent via-gray-200 to-transparent mb-6\" />\n              <p className=\"text-sm text-gray-500\">\n                Don't have an account?{' '}\n                <span className=\"text-red-600 font-medium\">Contact your administrator</span>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Footer */}\n        <div className=\"text-center mt-6\">\n          <p className=\"text-xs text-gray-400\">\n            © 2024 ROSAE Theatre Management. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9190},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/user-management.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Users, Shield, User, Clock, Plus, Eye, Trash2, Edit, EyeOff } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role?: 'admin' | 'employee';\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface CreateUserData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: 'admin' | 'employee';\n}\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [createUserData, setCreateUserData] = useState<CreateUserData>({\n    email: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    role: 'employee'\n  });\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch all users\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: CreateUserData) => {\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create user');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User created successfully\",\n        description: \"The new user account has been created.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      setIsCreateDialogOpen(false);\n      setCreateUserData({\n        email: '',\n        password: '',\n        firstName: '',\n        lastName: '',\n        role: 'employee'\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/users/${userId}`, {\n        method: 'DELETE',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to delete user');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"User deleted successfully\",\n        description: \"The user account has been removed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to delete user\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    createUserMutation.mutate(createUserData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  const isAdmin = user?.role === 'admin';\n\n  if (!isAdmin) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center min-h-[400px]\">\n            <Card className=\"bg-rosae-dark-gray border-gray-600 max-w-md\">\n              <CardContent className=\"p-8 text-center\">\n                <Shield className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">Access Restricted</h3>\n                <p className=\"text-gray-400\">\n                  You need administrator privileges to access user management features.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\">User Management</h2>\n            <p className=\"text-gray-400\">Create and manage employee accounts</p>\n          </div>\n          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-rosae-red hover:bg-rosae-red/90\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Employee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-rosae-dark-gray border-gray-600\">\n              <DialogHeader>\n                <DialogTitle className=\"text-white\">Create New Employee Account</DialogTitle>\n                <DialogDescription className=\"text-gray-400\">\n                  Add a new employee to the system with their login credentials.\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleCreateUser} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\" className=\"text-white\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={createUserData.firstName}\n                      onChange={(e) => setCreateUserData({ ...createUserData, firstName: e.target.value })}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\" className=\"text-white\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={createUserData.lastName}\n                      onChange={(e) => setCreateUserData({ ...createUserData, lastName: e.target.value })}\n                      required\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\" className=\"text-white\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={createUserData.email}\n                    onChange={(e) => setCreateUserData({ ...createUserData, email: e.target.value })}\n                    required\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                  />\n                </div>\n                                 <div>\n                   <Label htmlFor=\"password\" className=\"text-white\">Password</Label>\n                   <div className=\"relative\">\n                     <Input\n                       id=\"password\"\n                       type={showPassword ? \"text\" : \"password\"}\n                       value={createUserData.password}\n                       onChange={(e) => setCreateUserData({ ...createUserData, password: e.target.value })}\n                       required\n                       className=\"bg-gray-800 border-gray-600 text-white pr-12\"\n                     />\n                     <button\n                       type=\"button\"\n                       className=\"absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-gray-300 transition-colors\"\n                       onClick={() => setShowPassword(!showPassword)}\n                     >\n                       {showPassword ? (\n                         <EyeOff className=\"h-5 w-5\" />\n                       ) : (\n                         <Eye className=\"h-5 w-5\" />\n                       )}\n                     </button>\n                   </div>\n                 </div>\n                <div>\n                  <Label htmlFor=\"role\" className=\"text-white\">Role</Label>\n                  <Select\n                    value={createUserData.role}\n                    onValueChange={(value: 'admin' | 'employee') => \n                      setCreateUserData({ ...createUserData, role: value })\n                    }\n                  >\n                    <SelectTrigger className=\"bg-gray-800 border-gray-600 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-gray-800 border-gray-600\">\n                      <SelectItem value=\"employee\">Employee</SelectItem>\n                      <SelectItem value=\"admin\">Administrator</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsCreateDialogOpen(false)}\n                    className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createUserMutation.isPending}\n                    className=\"bg-rosae-red hover:bg-rosae-red/90\"\n                  >\n                    {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Users Table */}\n        <Card className=\"bg-rosae-dark-gray border-gray-600\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Users className=\"w-5 h-5 mr-2\" />\n              All Users ({users.length})\n            </CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Manage user accounts and their permissions\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {usersLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"text-gray-400\">Loading users...</div>\n              </div>\n            ) : users.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                <p className=\"text-gray-400\">No users found</p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"border-gray-600\">\n                      <TableHead className=\"text-gray-300\">User</TableHead>\n                      <TableHead className=\"text-gray-300\">Email</TableHead>\n                      <TableHead className=\"text-gray-300\">Role</TableHead>\n                      <TableHead className=\"text-gray-300\">Created</TableHead>\n                      <TableHead className=\"text-gray-300\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {users.map((user) => (\n                      <TableRow key={user.id} className=\"border-gray-600\">\n                        <TableCell className=\"text-white\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-rosae-red/20 rounded-full flex items-center justify-center\">\n                              <User className=\"w-4 h-4 text-rosae-red\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">\n                                {user.firstName && user.lastName \n                                  ? `${user.firstName} ${user.lastName}`\n                                  : 'Unknown User'\n                                }\n                              </div>\n                              <div className=\"text-sm text-gray-400\">ID: {user.id}</div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-white\">{user.email}</TableCell>\n                        <TableCell>\n                          <Badge \n                            className={user.role === 'admin' \n                              ? 'bg-red-500/20 text-red-400' \n                              : 'bg-blue-500/20 text-blue-400'\n                            }\n                          >\n                            {user.role === 'admin' ? 'Administrator' : 'Employee'}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-gray-400\">\n                          {user.createdAt ? formatDate(user.createdAt) : 'Unknown'}\n                        </TableCell>\n                                                 <TableCell>\n                           <div className=\"flex items-center space-x-2\">\n                             <Button\n                               size=\"sm\"\n                               variant=\"outline\"\n                               className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                               onClick={() => {\n                                 // Show user details in a modal or alert\n                                 const userDetails = `\nName: ${user.firstName} ${user.lastName}\nEmail: ${user.email}\nRole: ${user.role}\nID: ${user.id}\nCreated: ${user.createdAt ? formatDate(user.createdAt) : 'Unknown'}\n                                 `.trim();\n                                 \n                                 toast({\n                                   title: \"User Details\",\n                                   description: userDetails,\n                                 });\n                               }}\n                             >\n                               <Eye className=\"w-4 h-4\" />\n                             </Button>\n                             <Button\n                               size=\"sm\"\n                               variant=\"outline\"\n                               className=\"border-gray-600 text-gray-300 hover:bg-gray-700\"\n                               onClick={() => {\n                                 // For now, just show a message. In the future, this could open an edit modal\n                                 toast({\n                                   title: \"Edit User\",\n                                   description: `Edit functionality for ${user.firstName} ${user.lastName} will be implemented soon.`,\n                                 });\n                               }}\n                             >\n                               <Edit className=\"w-4 h-4\" />\n                             </Button>\n                             <Button\n                               size=\"sm\"\n                               variant=\"outline\"\n                               className=\"border-red-600 text-red-400 hover:bg-red-600/20\"\n                               onClick={() => {\n                                 if (user.role === 'admin') {\n                                   toast({\n                                     title: \"Cannot Delete Admin\",\n                                     description: \"Admin users cannot be deleted\",\n                                     variant: \"destructive\",\n                                   });\n                                   return;\n                                 }\n                                 \n                                 if (confirm(`Are you sure you want to delete ${user.firstName} ${user.lastName}? This action cannot be undone.`)) {\n                                   deleteUserMutation.mutate(user.id);\n                                 }\n                               }}\n                               disabled={deleteUserMutation.isPending}\n                             >\n                               <Trash2 className=\"w-4 h-4\" />\n                             </Button>\n                           </div>\n                         </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Admin Capabilities */}\n        <Card className=\"bg-rosae-dark-gray border-gray-600 mt-6\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-6 flex items-center\">\n              <Shield className=\"w-5 h-5 mr-2 text-rosae-red\" />\n              Administrator Capabilities\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <h4 className=\"text-lg font-semibold text-white\">User Management</h4>\n                <ul className=\"space-y-2 text-gray-300\">\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mr-3\"></div>\n                    Create new employee accounts\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mr-3\"></div>\n                    View all user records and activities\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mr-3\"></div>\n                    Manage user roles and permissions\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full mr-3\"></div>\n                    Monitor employee performance\n                  </li>\n                </ul>\n              </div>\n              <div className=\"space-y-4\">\n                <h4 className=\"text-lg font-semibold text-white\">Data Access</h4>\n                <ul className=\"space-y-2 text-gray-300\">\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-3\"></div>\n                    View all bookings from all employees\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-3\"></div>\n                    Access all expense records\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-3\"></div>\n                    Generate comprehensive reports\n                  </li>\n                  <li className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full mr-3\"></div>\n                    Export data for analysis\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":20535},"client/src/pages/verification.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertCircle, Search, CheckCircle, Save, Phone } from \"lucide-react\";\n\nexport default function Verification() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [selectedBooking, setSelectedBooking] = useState<any>(null);\n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Edit form states\n  const [editForm, setEditForm] = useState({\n    totalAmount: \"\",\n    cashAmount: \"\",\n    upiAmount: \"\",\n    snacksAmount: \"\",\n    snacksCash: \"\",\n    snacksUpi: \"\",\n    isEighteenPlus: true,\n    visited: true,\n    reasonNotEighteen: \"\",\n    reasonNotVisited: \"\",\n    customerName: \"\"\n  });\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\", \n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Search booking by phone number\n  const searchBooking = async () => {\n    if (!phoneNumber) {\n      toast({\n        title: \"Phone Number Required\",\n        description: \"Please enter a phone number to search\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      let booking = null;\n      \n      const response = await fetch(`/api/bookings/search?phone=${phoneNumber}`);\n      if (response.ok) {\n        const bookings = await response.json();\n        if (bookings.length > 0) {\n          booking = bookings[0]; // Get the most recent booking\n        }\n      }\n\n      if (booking) {\n        setSelectedBooking(booking);\n        setEditForm({\n          totalAmount: booking.totalAmount?.toString() || \"\",\n          cashAmount: booking.cashAmount?.toString() || \"\",\n          upiAmount: booking.upiAmount?.toString() || \"\",\n          snacksAmount: booking.snacksAmount?.toString() || \"\",\n          snacksCash: booking.snacksCash?.toString() || \"\",\n          snacksUpi: booking.snacksUpi?.toString() || \"\",\n          isEighteenPlus: booking.isEighteenPlus !== false,\n          visited: booking.visited !== false,\n          reasonNotEighteen: booking.reasonNotEighteen || \"\",\n          reasonNotVisited: booking.reasonNotVisited || \"\",\n          customerName: booking.customerName || \"\"\n        });\n      } else {\n        toast({\n          title: \"Booking Not Found\",\n          description: \"No booking found with the provided details\",\n          variant: \"destructive\"\n        });\n        setSelectedBooking(null);\n      }\n    } catch (error) {\n      toast({\n        title: \"Search Error\",\n        description: \"Failed to search for booking\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Update booking mutation\n  const updateBookingMutation = useMutation({\n    mutationFn: async (updateData: any) => {\n      return await apiRequest(\"PATCH\", `/api/bookings/${selectedBooking.id}`, updateData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Booking updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      setIsEditing(false);\n      // Refresh the booking data\n      searchBooking();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update booking\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSave = () => {\n    // Validate amounts\n    const totalAmount = parseFloat(editForm.totalAmount);\n    const cashAmount = parseFloat(editForm.cashAmount);\n    const upiAmount = parseFloat(editForm.upiAmount);\n    const snacksAmount = parseFloat(editForm.snacksAmount) || 0;\n    const snacksCash = parseFloat(editForm.snacksCash) || 0;\n    const snacksUpi = parseFloat(editForm.snacksUpi) || 0;\n\n    if (isNaN(totalAmount) || isNaN(cashAmount) || isNaN(upiAmount)) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter valid numeric amounts\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (Math.abs((cashAmount + upiAmount) - totalAmount) > 0.01) {\n      toast({\n        title: \"Amount Mismatch\",\n        description: \"Cash + UPI must equal total amount\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (snacksAmount > 0 && Math.abs((snacksCash + snacksUpi) - snacksAmount) > 0.01) {\n      toast({\n        title: \"Snacks Amount Mismatch\",\n        description: \"Snacks Cash + UPI must equal snacks total\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    updateBookingMutation.mutate({\n      totalAmount,\n      cashAmount,\n      upiAmount,\n      snacksAmount,\n      snacksCash,\n      snacksUpi,\n      isEighteenPlus: editForm.isEighteenPlus,\n      visited: editForm.visited,\n      reasonNotEighteen: editForm.reasonNotEighteen,\n      reasonNotVisited: editForm.reasonNotVisited,\n      customerName: editForm.customerName\n    });\n  };\n\n  const formatCurrency = (value: number) => {\n    return `₹${value.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-rosae-black flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-white\">Booking Verification</h2>\n            <p className=\"text-gray-400\">Search and edit booking details for verification</p>\n          </div>\n        </div>\n\n        {/* Search Section */}\n        <Card className=\"bg-rosae-dark-gray border-gray-600 mb-6\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Search Booking</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Search Input */}\n            <div className=\"flex space-x-4\">\n              <div className=\"flex-1\">\n                <Label htmlFor=\"phoneNumber\" className=\"text-gray-300\">Phone Number</Label>\n                <Input\n                  id=\"phoneNumber\"\n                  value={phoneNumber}\n                  onChange={(e) => setPhoneNumber(e.target.value)}\n                  placeholder=\"Enter phone number\"\n                  className=\"bg-gray-800 border-gray-600 text-white\"\n                />\n              </div>\n              <Button onClick={searchBooking} className=\"bg-rosae-red hover:bg-rosae-dark-red self-end\">\n                <Search className=\"w-4 h-4 mr-2\" />\n                Search\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Booking Details Section */}\n        {selectedBooking && (\n          <Card className=\"bg-rosae-dark-gray border-gray-600\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-white\">Booking Details</CardTitle>\n                <div className=\"flex space-x-2\">\n                  {!isEditing ? (\n                    <Button onClick={() => setIsEditing(true)} variant=\"outline\" className=\"border-blue-600/50 text-blue-400 hover:bg-blue-600/20\">\n                      Edit Details\n                    </Button>\n                  ) : (\n                    <>\n                      <Button onClick={handleSave} disabled={updateBookingMutation.isPending} className=\"bg-green-600 hover:bg-green-700\">\n                        <Save className=\"w-4 h-4 mr-2\" />\n                        Save Changes\n                      </Button>\n                      <Button onClick={() => setIsEditing(false)} variant=\"outline\" className=\"border-gray-600 text-gray-300\">\n                        Cancel\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-gray-300\">Booking ID</Label>\n                  <p className=\"text-white font-mono\">{selectedBooking.id}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Theatre</Label>\n                  <p className=\"text-white\">{selectedBooking.theatreName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Date</Label>\n                  <p className=\"text-white\">{formatDate(selectedBooking.bookingDate)}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Time Slot</Label>\n                  <p className=\"text-white\">{selectedBooking.timeSlot}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Guests</Label>\n                  <p className=\"text-white\">{selectedBooking.guests}</p>\n                </div>\n                <div>\n                  <Label className=\"text-gray-300\">Phone Number</Label>\n                  <p className=\"text-white\">{selectedBooking.phoneNumber}</p>\n                </div>\n              </div>\n\n              {/* Editable Fields */}\n              <div className=\"space-y-4 border-t border-gray-600 pt-6\">\n                <h3 className=\"text-lg font-semibold text-white\">Editable Details</h3>\n                \n                {/* Customer Name */}\n                <div>\n                  <Label htmlFor=\"customerName\" className=\"text-gray-300\">Customer Name</Label>\n                  {isEditing ? (\n                    <Input\n                      id=\"customerName\"\n                      value={editForm.customerName}\n                      onChange={(e) => setEditForm({...editForm, customerName: e.target.value})}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                    />\n                  ) : (\n                    <p className=\"text-white\">{selectedBooking.customerName || 'N/A'}</p>\n                  )}\n                </div>\n\n                {/* Booking Amounts */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"totalAmount\" className=\"text-gray-300\">Total Amount</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"totalAmount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.totalAmount}\n                        onChange={(e) => setEditForm({...editForm, totalAmount: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.totalAmount))}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cashAmount\" className=\"text-gray-300\">Cash Amount</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"cashAmount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.cashAmount}\n                        onChange={(e) => setEditForm({...editForm, cashAmount: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.cashAmount))}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"upiAmount\" className=\"text-gray-300\">UPI Amount</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"upiAmount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.upiAmount}\n                        onChange={(e) => setEditForm({...editForm, upiAmount: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.upiAmount))}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Snacks Amounts */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 border-t border-gray-600 pt-4\">\n                  <div>\n                    <Label htmlFor=\"snacksAmount\" className=\"text-gray-300\">Snacks Total</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"snacksAmount\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.snacksAmount}\n                        onChange={(e) => setEditForm({...editForm, snacksAmount: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.snacksAmount || 0))}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"snacksCash\" className=\"text-gray-300\">Snacks Cash</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"snacksCash\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.snacksCash}\n                        onChange={(e) => setEditForm({...editForm, snacksCash: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.snacksCash || 0))}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"snacksUpi\" className=\"text-gray-300\">Snacks UPI</Label>\n                    {isEditing ? (\n                      <Input\n                        id=\"snacksUpi\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={editForm.snacksUpi}\n                        onChange={(e) => setEditForm({...editForm, snacksUpi: e.target.value})}\n                        className=\"bg-gray-800 border-gray-600 text-white\"\n                      />\n                    ) : (\n                      <p className=\"text-white\">{formatCurrency(Number(selectedBooking.snacksUpi || 0))}</p>\n                    )}\n                  </div>\n                </div>\n\n                {/* Age Verification */}\n                <div>\n                  <Label className=\"text-gray-300\">18+ Verification</Label>\n                  <div className=\"mt-2\">\n                    {isEditing ? (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex space-x-4\">\n                          <Button\n                            type=\"button\"\n                            variant={editForm.isEighteenPlus ? \"default\" : \"outline\"}\n                            onClick={() => setEditForm({...editForm, isEighteenPlus: true, reasonNotEighteen: \"\"})}\n                            className={editForm.isEighteenPlus ? \"bg-green-600 hover:bg-green-700\" : \"border-gray-600 text-gray-300\"}\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-2\" />\n                            Yes (18+)\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            variant={!editForm.isEighteenPlus ? \"default\" : \"outline\"}\n                            onClick={() => setEditForm({...editForm, isEighteenPlus: false})}\n                            className={!editForm.isEighteenPlus ? \"bg-red-600 hover:bg-red-700\" : \"border-gray-600 text-gray-300\"}\n                          >\n                            <AlertCircle className=\"w-4 h-4 mr-2\" />\n                            No (Under 18)\n                          </Button>\n                        </div>\n                        {!editForm.isEighteenPlus && (\n                          <Textarea\n                            placeholder=\"Reason for under 18 verification...\"\n                            value={editForm.reasonNotEighteen}\n                            onChange={(e) => setEditForm({...editForm, reasonNotEighteen: e.target.value})}\n                            className=\"bg-gray-800 border-gray-600 text-white\"\n                          />\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={selectedBooking.isEighteenPlus \n                          ? 'bg-green-600/20 text-green-400 border-green-600/30'\n                          : 'bg-red-600/20 text-red-400 border-red-600/30'\n                        }>\n                          {selectedBooking.isEighteenPlus ? 'Yes (18+)' : 'No (Under 18)'}\n                        </Badge>\n                        {!selectedBooking.isEighteenPlus && selectedBooking.reasonNotEighteen && (\n                          <p className=\"text-gray-400 text-sm\">Reason: {selectedBooking.reasonNotEighteen}</p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Visited Status */}\n                <div>\n                  <Label className=\"text-gray-300\">Visited Status</Label>\n                  <div className=\"mt-2\">\n                    {isEditing ? (\n                      <div className=\"space-y-3\">\n                        <div className=\"flex space-x-4\">\n                          <Button\n                            type=\"button\"\n                            variant={editForm.visited ? \"default\" : \"outline\"}\n                            onClick={() => setEditForm({...editForm, visited: true, reasonNotVisited: \"\"})}\n                            className={editForm.visited ? \"bg-green-600 hover:bg-green-700\" : \"border-gray-600 text-gray-300\"}\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-2\" />\n                            Visited\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            variant={!editForm.visited ? \"default\" : \"outline\"}\n                            onClick={() => setEditForm({...editForm, visited: false})}\n                            className={!editForm.visited ? \"bg-red-600 hover:bg-red-700\" : \"border-gray-600 text-gray-300\"}\n                          >\n                            <AlertCircle className=\"w-4 h-4 mr-2\" />\n                            Not Visited\n                          </Button>\n                        </div>\n                        {!editForm.visited && (\n                          <Textarea\n                            placeholder=\"Reason for not visiting...\"\n                            value={editForm.reasonNotVisited}\n                            onChange={(e) => setEditForm({...editForm, reasonNotVisited: e.target.value})}\n                            className=\"bg-gray-800 border-gray-600 text-white\"\n                          />\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={selectedBooking.visited \n                          ? 'bg-green-600/20 text-green-400 border-green-600/30'\n                          : 'bg-yellow-600/20 text-yellow-400 border-yellow-600/30'\n                        }>\n                          {selectedBooking.visited ? 'Visited' : 'Not Visited'}\n                        </Badge>\n                        {!selectedBooking.visited && selectedBooking.reasonNotVisited && (\n                          <p className=\"text-gray-400 text-sm\">Reason: {selectedBooking.reasonNotVisited}</p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":21266},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}